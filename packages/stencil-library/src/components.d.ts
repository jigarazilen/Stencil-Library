/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FilterGroup } from "./components/my-component/UI/advanced-search/advanced-search-grouped";
import { GridOptions } from "ag-grid-community";
import { RenderConfig } from "./components/my-component/UI/grid/ambient-template-grid/interfaces/gridInterfaces";
import { FontOverrides, Guid, Question } from "./components/my-component/UI/forms/udp-forms/types";
import { User } from "./udp-utilities/udp-user-creator";
import { TypographyVariant } from "./components/my-component/unity-typography";
export { FilterGroup } from "./components/my-component/UI/advanced-search/advanced-search-grouped";
export { GridOptions } from "ag-grid-community";
export { RenderConfig } from "./components/my-component/UI/grid/ambient-template-grid/interfaces/gridInterfaces";
export { FontOverrides, Guid, Question } from "./components/my-component/UI/forms/udp-forms/types";
export { User } from "./udp-utilities/udp-user-creator";
export { TypographyVariant } from "./components/my-component/unity-typography";
export namespace Components {
    interface AdvancedSearch {
        "fetchFilters": Function;
        "filterList": any[];
        "filterRenderList": any[];
        "handleDelete": (arg0: object) => void;
        "handleItemClick": (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged": (event: CustomEvent) => void;
    }
    interface AdvancedSearchGrouped {
        "fetchFilters": Function;
        "filterList": any[];
        "filterObjectsWithGroups": FilterGroup[];
        "filterRenderList": any[];
        "fullClearSearch": () => void;
        "handleAddNewFilter": (groupId: string, otherId: string) => void;
        "handleAddNewGroup": (groupId: string, logicalOperator: 'AND' | 'OR') => void;
        "handleDelete": (arg0: object) => void;
        "handleGroupItemDelete": (filterGroupId: string) => void;
        "handleItemClick": (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged": (event: CustomEvent) => void;
        "recentSearchesOptions": any[];
        "searchData": any;
        "selectRecentSearch": (e: any) => void;
        "updateLogicalOperator": (groupId: string, logicalOperator: 'AND' | 'OR') => void;
    }
    interface AgTable {
        "gridOptions": GridOptions;
        "height": string;
        "licensekey": string;
    }
    interface AmbientDemoContainer {
        "title": string;
    }
    interface AmbientTemplateGrid {
        "accessToken": string;
        "actionId": string;
        "additionalFilterChips": Array<any>;
        "apiCatalogId": string;
        "apiMethodId": string;
        "buttonTransform": string;
        "cellClickHandler": (value: any, callback: any) => void;
        "cellClickHandlerX": (value: any, callback: any) => void;
        "columnDefs": any[];
        "columnNames": { [key: string]: string };
        "dataEmitter": any;
        "dataEmitterRequest": any;
        "defaultSearchObject": Array<any>;
        "externalPayload": any;
        "externalSearchFilter": Array<any>;
        "filterObject": Array<any>;
        "fitGrid": string;
        "fullViewData": any;
        "gridBarTitle": string;
        "gridId": string;
        "gridState": any[];
        "hotListIdentifier": string;
        "kpiValues": Array<any>;
        "maxChipsAllowed": number;
        "menuItems": Array<any>;
        "noResults": boolean;
        "productId": number;
        "queryId": string;
        "renderConfigs": RenderConfig[];
        "rowData": any[];
        "searchKey": Object;
        "showAdvancedSearchFeature": boolean;
        "showFilterColumnFeature": boolean;
        "showHotlistButton": boolean;
        "showRank": boolean;
        "suppressMenuHide": boolean;
        "tenantId": string;
        "updateFilterAndFetch": (newFilter: Array<any>) => Promise<void>;
        "userId": string;
        "viewActionClickHandler": (value: any, callback: any) => void;
        "viewChips": Array<any>;
        "viewListrowData": any[];
    }
    interface AppBar {
        "username": string;
    }
    interface CheckBox {
        "checked": boolean;
        "id": string;
        "label": string;
    }
    interface ChipSection {
        "additionalFilterChips": Array<any>;
        "filterChips": Array<any>;
        "handleDelete": Function;
        "hideKpiSection": boolean;
        "kpiValues": Array<any>;
        "maxKPIsDisplayed": number;
        "menuItems": Array<any>;
        "viewChips": Array<any>;
    }
    interface CustomButton {
        "disabled": boolean;
        "label": string;
        "secondary": boolean;
        "size": 'default' | 'short' | 'tall';
        "type": 'button' | 'submit' | 'reset';
        "variant": 'default' | 'outline';
    }
    interface EditViewFormDialog {
        "apiCatalogId": any;
        "application": string;
        "closeDialog": any;
        "currentGridId": string;
        "currentGridViewVisibilityTypeId": number;
        "currentIsDefault": boolean;
        "currentName": string;
        "domain": any;
        "entity": string;
        "gApi": any;
        "gcApi": any;
        "gridId": any;
        "handleClose": Function;
        "handleFormSubmit": (gridId: any, name: string, isPrivate: number, isDefault: boolean) => void;
        "open": boolean;
        "refetchViews": () => void;
        "tenant": string;
        "title": string;
        "user": any;
    }
    interface FileUpload {
        "allowMultiple": boolean;
        "allowedFileTypes": Array<string>;
        "browseFileMessage": string;
        "disallowedFileTypes": Array<string>;
        "dragAndDropMessage": string;
        "error": string;
        "fullWidth": boolean;
        "hideButton": boolean;
        "hideDragAndDrop": boolean;
        "id": string;
        "required": boolean;
    }
    interface FilterConditions {
    }
    interface FluentDialog {
        "actionOne": Function;
        "actionTwo": Function;
        "ariaDescribedby": string;
        "ariaLabelledby": string;
        "buttonOneHidden": boolean;
        "buttonTwoHidden": boolean;
        "descriptionId": string;
        "disableOne": boolean;
        "disableTwo": boolean;
        "handleClose": Function;
        "labelOne": string;
        "labelTwo": string;
        "message": string;
        "open": boolean;
        "progress": number;
        "title": string;
        "titleId": string;
    }
    interface GetUser {
        "accessToken": string;
    }
    interface GridPrimaryBar {
        "actionButtons": any[];
        "customAdvancedSearchClick"?: (event?: MouseEvent) => void;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customInsightsClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowCustomSearchClick"?: (event?: MouseEvent) => void;
        "customShowGridOptionsClick"?: (event?: MouseEvent) => void;
        "customShowHotlistClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "customToggleServerClientClick"?: (event?: MouseEvent) => void;
        "hiddenActionButtons": string[];
        "hiddenLabels": string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "showAdvancedSearchFeature": boolean;
        "showFilterColumnFeature": boolean;
        "showGridOptions": boolean;
        "showHotlistButton": boolean;
        "title": string;
    }
    interface HintPanel {
        "hideHintText": string;
        "hint": string;
    }
    interface KpiList {
        "kpiValues": Array<{ label: string, value: number }>;
    }
    interface LogicalSearchIndicator {
        "type": number;
    }
    interface MyComponent {
        "accessTokenProp": string;
        "first": string;
        "last": string;
        "middle": string;
    }
    interface PageRenderer {
        "accessToken": string;
        "gridId": string;
        "pageData": any;
        "productId": string;
        "tenantId": string;
        "userId": string;
    }
    interface PrimaryActionHeader {
        "actionButtonLabel": string;
        "actionButtons": any[];
        "activeTabIndex": number;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "defaultActionButtons": any[];
        "hiddenActionButtons": string[];
        "hiddenLabels": string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "selectTab": (index: number) => void;
        "tabs": boolean;
        "title": string;
    }
    interface SaveViewFormDialog {
        "apiCatalogId": any;
        "application": string;
        "closeDialog": any;
        "domain": any;
        "entity": string;
        "gApi": any;
        "gcApi": any;
        "gridId": any;
        "handleClose": Function;
        "handleFormSubmit": (name: string, isPrivate: number, isDefault: boolean) => void;
        "open": boolean;
        "refetchViews": () => void;
        "tenant": string;
        "title": string;
        "user": any;
    }
    interface SearchListItem {
        "groupId": string;
        "handleDelete": (event: MouseEvent) => void;
        "label": string;
        "name": string;
        "operator": string;
    }
    interface SelectableList {
        "disableSelection": boolean;
        "displayKey": string;
        "error": string;
        "id": string;
        "items": any[];
        "multiSelect": boolean;
        "onInput": (event: Event) => void;
        "required": boolean;
        "useCheckbox": boolean;
        "value": string;
        "valueKey": string;
    }
    interface SideSheet {
        "buttonLabel": string;
        "buttonTransform": string;
        "disabled": boolean;
        "handleSideSheetButton": () => void;
        "open": boolean;
        "padding": boolean;
        "position": 'left' | 'right';
        "sideSheetButtonLabel": string;
        "title": string;
        "toggleDrawer": () => void;
        "widthOption": 'short' | 'long' | number;
    }
    interface SideSheetContainer {
        "padding": boolean;
    }
    interface SimpleCard {
    }
    interface StatusChip {
        "statusClasses": { [key: string]: string };
        "statusValue": string | boolean;
    }
    interface StencilChip {
        "color": 'primary' | 'secondary';
        "defaultToggled": boolean;
        "externalToggleString": string;
        "leftIcon": any;
        "level": number;
        "showDelete": boolean;
        "showLeftIcon": boolean;
        "text": string;
    }
    interface StencilField {
        "component": string;
        "componentProps": Object;
        "defaultValue": string;
        "id": string;
        "label": string;
        "name": string;
        "required": boolean;
        "value": string;
    }
    interface StencilForm {
        "handleSubmit": (values: Object) => void;
        "initialValues": Object;
        "validate": (values: Object, errors: Object) => Object;
        "validateOnBlur": boolean;
    }
    interface StencilIconButton {
        "darkIcon": boolean;
        "icon": any;
        "iconClassName": string;
        "iconName": string;
        "noBackground": boolean;
        "onClick": (event: MouseEvent) => void;
        "secondary": boolean;
        "showLabel": boolean;
        "tooltip": string;
    }
    interface StencilIconButtonGridActionHeader {
        "darkIcon": boolean;
        "icon": any;
        "iconClassName": string;
        "iconName": string;
        "noBackground": boolean;
        "onClick": (event: MouseEvent) => void;
        "secondary": boolean;
        "showLabel": boolean;
        "tooltip": string;
    }
    interface StencilToggle {
        "checked": boolean;
        "disabled": boolean;
        "idItem": string;
        "label": string;
    }
    interface TestApi {
    }
    interface TestApiUpdated {
    }
    interface TestForm {
    }
    interface TextArea {
        "disabled": boolean;
        "error": string;
        "fullWidth": boolean;
        "handleBlur": (event: FocusEvent) => void;
        "handleChange": (event: Event) => void;
        "handleFocus": (event: FocusEvent) => void;
        "id": string;
        "label": string;
        "maxCharacter": number;
        "placeholder": string;
        "readOnly": boolean;
        "required": boolean;
        "rows": number;
        "value": string;
    }
    interface TextField {
        "disabled": boolean;
        "error": string;
        "handleBlur": (event: Event) => void;
        "handleFocus": (event: Event) => void;
        "handleInput": (event: Event) => void;
        "hidden": boolean;
        "id": string;
        "label": string;
        "maxCharacter": number;
        "placeholder": string;
        "readOnly": boolean;
        "required": boolean;
        "value": string;
    }
    interface ToggleButton {
        "onToggle": () => void;
        "toggled": boolean;
    }
    interface TreeListItem {
        "add": boolean;
        "customAttribute": string;
        "dataOne": string;
        "dataTwo": string;
        "deleteHandler": (event: MouseEvent) => void;
        "editHandler": (event: MouseEvent) => void;
        "gridViewVisibilityTypeId": number;
        "isDefault": boolean;
        "label": string;
        "level": number;
        "nestedItems"?: any[];
        "parent": string;
        "parentFilter": any;
        "parentName": string;
        "parentPath": string;
        "reference": string | null;
        "showAdd": boolean;
        "showDeleteOption": boolean;
        "showEditOption": boolean;
        "showUpdateDefaultOption": boolean;
        "showViewOption": boolean;
        "statusClasses": { [key: string]: string };
        "statusKey": string;
        "statusLabel": string;
        "statusValue": boolean;
        "test": string;
        "updateDefaultHandler": (event: MouseEvent) => void;
        "viewHandler": (event: MouseEvent) => void;
    }
    interface UdpAdornment {
        "status": 'success' | 'warning' | 'error' | 'info' | 'disabled';
    }
    interface UdpAmbientCard {
        "moreText": string;
        "overflow": string;
        "width": string;
    }
    interface UdpAmbientToolTip {
        "content": string;
    }
    interface UdpAvatar {
        "username": string;
    }
    interface UdpBadge {
        "content": number;
        "max": number;
    }
    interface UdpColumnHeader {
    }
    interface UdpDateSelector {
        "error": string;
        "id": string;
        "label": string;
        /**
          * Maximum date, supports any date supported by the js Date constructor
         */
        "max": string;
        /**
          * Minimum date, supports any date supported by the js Date constructor
         */
        "min": string;
        "required": boolean;
        "value": string;
    }
    interface UdpDatetimeSelector {
        "error": string;
        "id": string;
        "label": string;
        /**
          * Maximum date, supports any date supported by the js Date constructor
         */
        "max": string;
        /**
          * Minimum date, supports any date supported by the js Date constructor
         */
        "min": string;
        "required": boolean;
        "value": string;
    }
    interface UdpDivider {
        "size": string;
        "variant": 'horizontal' | 'vertical';
    }
    interface UdpDynamicContainerWithMenu {
        "calculateChildren": () => Promise<void>;
        "externalToggle": string;
        "menuItems": any[];
    }
    interface UdpDynamicForm {
        "getFormData": () => Promise<{ searchField: string; searchOperator: any; searchValue: any; groupId: number; }[]>;
    }
    interface UdpFetch {
        "accessToken": string;
        "isServerSide": boolean;
        "promotedEntity": any;
        "tenantId": string;
    }
    interface UdpFormsRenderer {
        "apiUrlBase": string;
        "callbackUrl": string;
        "formId": Guid;
        "getAccessToken": () => Promise<string>;
        "isPublic": boolean;
        "productId": number;
        "tenantId": Guid;
        "triggerAction": (actionId: Guid, params: Object) => void;
        "unityUrl": string;
        "version": number;
    }
    interface UdpFunctionButton {
        "add": boolean;
        "delete": boolean;
        "edit": boolean;
        "expand": boolean;
        "isDefault": boolean;
        "noBackground": boolean;
        "view": boolean;
    }
    interface UdpGridLoader {
        "numColumns": number;
        "numRows": number;
        "width": string;
    }
    interface UdpHotlistForm {
        "handleCancelClick": () => void;
        "handleFormSubmit": (name: string, isPrivate: boolean, columnState: any) => void;
        "refetchViews": () => void;
    }
    interface UdpLinearLoader {
    }
    interface UdpMenuItem {
        "label": string;
    }
    interface UdpNotification {
        "active": boolean;
        "message": string;
        "status": 'success' | 'error' | 'warning';
        "userCancel": boolean;
    }
    interface UdpPage {
        /**
          * Optional maximum page width
         */
        "maxWidth"?: string;
        /**
          * Default padding for the layout
         */
        "padding"?: string;
    }
    interface UdpPageHeader {
    }
    interface UdpPopOver {
        "anchorElement": HTMLElement;
        "isOpen": boolean;
    }
    interface UdpPopOverGridActionHeader {
        "anchorElement": HTMLElement;
        "isOpen": boolean;
    }
    interface UdpQuestion {
        "question": Question;
        "questionNumber": number;
        "styleOverrides": {
    helperText: FontOverrides;
    questionText: FontOverrides;
    paragraphText: FontOverrides;
  };
        "value": string;
    }
    interface UdpRadioButton {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "name": string;
        "value": string;
    }
    interface UdpSelector {
        "defaultOption": string;
        "error": string;
        "fieldName": string;
        "id": string;
        "label": string;
        "large": boolean;
        "multiSelect": boolean;
        "options": Array<{ value: string; label: string }>;
        "required": boolean;
    }
    interface UdpSkeletonLoading {
        "borderRadius": string;
        "height": string;
        "width": string;
    }
    interface UdpSplitScreen {
        "panelContent": string;
        "toggleOpen": () => Promise<void>;
    }
    interface UdpTab {
        "active": boolean;
        "title": string;
    }
    interface UdpTabs {
    }
    interface UdpTimeSelector {
        "error": string;
        "id": string;
        "label": string;
        "max": string;
        "min": string;
        "required": boolean;
        "value": string;
    }
    interface UdpUserCreator {
        "createUser": (userInfo: any) => Promise<User>;
    }
    interface UdpVerticalSpacer {
        "unit": 'small' | 'medium' | 'large';
    }
    interface UnityTypography {
        "variant": TypographyVariant;
    }
    interface UpdAlertBanner {
        "message": string;
        "onClick": () => void;
        "type": 'info' | 'warning' | 'error' | 'success';
    }
}
export interface AdvancedSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAdvancedSearchElement;
}
export interface AdvancedSearchGroupedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAdvancedSearchGroupedElement;
}
export interface AmbientTemplateGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmbientTemplateGridElement;
}
export interface CheckBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCheckBoxElement;
}
export interface CustomButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomButtonElement;
}
export interface FileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFileUploadElement;
}
export interface GetUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGetUserElement;
}
export interface SearchListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchListItemElement;
}
export interface SelectableListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSelectableListElement;
}
export interface StencilChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStencilChipElement;
}
export interface StencilFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStencilFormElement;
}
export interface StencilToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStencilToggleElement;
}
export interface TextAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextAreaElement;
}
export interface TextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextFieldElement;
}
export interface TreeListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTreeListItemElement;
}
export interface UdpDateSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpDateSelectorElement;
}
export interface UdpDatetimeSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpDatetimeSelectorElement;
}
export interface UdpDynamicContainerWithMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpDynamicContainerWithMenuElement;
}
export interface UdpFetchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpFetchElement;
}
export interface UdpMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpMenuItemElement;
}
export interface UdpPageHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpPageHeaderElement;
}
export interface UdpSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpSelectorElement;
}
export interface UdpTimeSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpTimeSelectorElement;
}
declare global {
    interface HTMLAdvancedSearchElementEventMap {
        "advancedSearchItemChange": any;
    }
    interface HTMLAdvancedSearchElement extends Components.AdvancedSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAdvancedSearchElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchElement, ev: AdvancedSearchCustomEvent<HTMLAdvancedSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAdvancedSearchElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchElement, ev: AdvancedSearchCustomEvent<HTMLAdvancedSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAdvancedSearchElement: {
        prototype: HTMLAdvancedSearchElement;
        new (): HTMLAdvancedSearchElement;
    };
    interface HTMLAdvancedSearchGroupedElementEventMap {
        "advancedSearchItemChange": any;
        "searchItemChanged": any;
    }
    interface HTMLAdvancedSearchGroupedElement extends Components.AdvancedSearchGrouped, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAdvancedSearchGroupedElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchGroupedElement, ev: AdvancedSearchGroupedCustomEvent<HTMLAdvancedSearchGroupedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAdvancedSearchGroupedElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchGroupedElement, ev: AdvancedSearchGroupedCustomEvent<HTMLAdvancedSearchGroupedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAdvancedSearchGroupedElement: {
        prototype: HTMLAdvancedSearchGroupedElement;
        new (): HTMLAdvancedSearchGroupedElement;
    };
    interface HTMLAgTableElement extends Components.AgTable, HTMLStencilElement {
    }
    var HTMLAgTableElement: {
        prototype: HTMLAgTableElement;
        new (): HTMLAgTableElement;
    };
    interface HTMLAmbientDemoContainerElement extends Components.AmbientDemoContainer, HTMLStencilElement {
    }
    var HTMLAmbientDemoContainerElement: {
        prototype: HTMLAmbientDemoContainerElement;
        new (): HTMLAmbientDemoContainerElement;
    };
    interface HTMLAmbientTemplateGridElementEventMap {
        "viewSaved": any;
        "externalEmitter": any;
        "selectedIdsChanged": number[];
    }
    interface HTMLAmbientTemplateGridElement extends Components.AmbientTemplateGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmbientTemplateGridElementEventMap>(type: K, listener: (this: HTMLAmbientTemplateGridElement, ev: AmbientTemplateGridCustomEvent<HTMLAmbientTemplateGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmbientTemplateGridElementEventMap>(type: K, listener: (this: HTMLAmbientTemplateGridElement, ev: AmbientTemplateGridCustomEvent<HTMLAmbientTemplateGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmbientTemplateGridElement: {
        prototype: HTMLAmbientTemplateGridElement;
        new (): HTMLAmbientTemplateGridElement;
    };
    interface HTMLAppBarElement extends Components.AppBar, HTMLStencilElement {
    }
    var HTMLAppBarElement: {
        prototype: HTMLAppBarElement;
        new (): HTMLAppBarElement;
    };
    interface HTMLCheckBoxElementEventMap {
        "checkboxChanged": boolean;
    }
    interface HTMLCheckBoxElement extends Components.CheckBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCheckBoxElementEventMap>(type: K, listener: (this: HTMLCheckBoxElement, ev: CheckBoxCustomEvent<HTMLCheckBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCheckBoxElementEventMap>(type: K, listener: (this: HTMLCheckBoxElement, ev: CheckBoxCustomEvent<HTMLCheckBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCheckBoxElement: {
        prototype: HTMLCheckBoxElement;
        new (): HTMLCheckBoxElement;
    };
    interface HTMLChipSectionElement extends Components.ChipSection, HTMLStencilElement {
    }
    var HTMLChipSectionElement: {
        prototype: HTMLChipSectionElement;
        new (): HTMLChipSectionElement;
    };
    interface HTMLCustomButtonElementEventMap {
        "customClick": void;
    }
    interface HTMLCustomButtonElement extends Components.CustomButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomButtonElementEventMap>(type: K, listener: (this: HTMLCustomButtonElement, ev: CustomButtonCustomEvent<HTMLCustomButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomButtonElementEventMap>(type: K, listener: (this: HTMLCustomButtonElement, ev: CustomButtonCustomEvent<HTMLCustomButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomButtonElement: {
        prototype: HTMLCustomButtonElement;
        new (): HTMLCustomButtonElement;
    };
    interface HTMLEditViewFormDialogElement extends Components.EditViewFormDialog, HTMLStencilElement {
    }
    var HTMLEditViewFormDialogElement: {
        prototype: HTMLEditViewFormDialogElement;
        new (): HTMLEditViewFormDialogElement;
    };
    interface HTMLFileUploadElementEventMap {
        "udpFieldChange": File[];
        "udpFieldBlur": Event;
    }
    interface HTMLFileUploadElement extends Components.FileUpload, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFileUploadElementEventMap>(type: K, listener: (this: HTMLFileUploadElement, ev: FileUploadCustomEvent<HTMLFileUploadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFileUploadElementEventMap>(type: K, listener: (this: HTMLFileUploadElement, ev: FileUploadCustomEvent<HTMLFileUploadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFileUploadElement: {
        prototype: HTMLFileUploadElement;
        new (): HTMLFileUploadElement;
    };
    interface HTMLFilterConditionsElement extends Components.FilterConditions, HTMLStencilElement {
    }
    var HTMLFilterConditionsElement: {
        prototype: HTMLFilterConditionsElement;
        new (): HTMLFilterConditionsElement;
    };
    interface HTMLFluentDialogElement extends Components.FluentDialog, HTMLStencilElement {
    }
    var HTMLFluentDialogElement: {
        prototype: HTMLFluentDialogElement;
        new (): HTMLFluentDialogElement;
    };
    interface HTMLGetUserElementEventMap {
        "userDataReady": any;
    }
    interface HTMLGetUserElement extends Components.GetUser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGetUserElementEventMap>(type: K, listener: (this: HTMLGetUserElement, ev: GetUserCustomEvent<HTMLGetUserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGetUserElementEventMap>(type: K, listener: (this: HTMLGetUserElement, ev: GetUserCustomEvent<HTMLGetUserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGetUserElement: {
        prototype: HTMLGetUserElement;
        new (): HTMLGetUserElement;
    };
    interface HTMLGridPrimaryBarElement extends Components.GridPrimaryBar, HTMLStencilElement {
    }
    var HTMLGridPrimaryBarElement: {
        prototype: HTMLGridPrimaryBarElement;
        new (): HTMLGridPrimaryBarElement;
    };
    interface HTMLHintPanelElement extends Components.HintPanel, HTMLStencilElement {
    }
    var HTMLHintPanelElement: {
        prototype: HTMLHintPanelElement;
        new (): HTMLHintPanelElement;
    };
    interface HTMLKpiListElement extends Components.KpiList, HTMLStencilElement {
    }
    var HTMLKpiListElement: {
        prototype: HTMLKpiListElement;
        new (): HTMLKpiListElement;
    };
    interface HTMLLogicalSearchIndicatorElement extends Components.LogicalSearchIndicator, HTMLStencilElement {
    }
    var HTMLLogicalSearchIndicatorElement: {
        prototype: HTMLLogicalSearchIndicatorElement;
        new (): HTMLLogicalSearchIndicatorElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPageRendererElement extends Components.PageRenderer, HTMLStencilElement {
    }
    var HTMLPageRendererElement: {
        prototype: HTMLPageRendererElement;
        new (): HTMLPageRendererElement;
    };
    interface HTMLPrimaryActionHeaderElement extends Components.PrimaryActionHeader, HTMLStencilElement {
    }
    var HTMLPrimaryActionHeaderElement: {
        prototype: HTMLPrimaryActionHeaderElement;
        new (): HTMLPrimaryActionHeaderElement;
    };
    interface HTMLSaveViewFormDialogElement extends Components.SaveViewFormDialog, HTMLStencilElement {
    }
    var HTMLSaveViewFormDialogElement: {
        prototype: HTMLSaveViewFormDialogElement;
        new (): HTMLSaveViewFormDialogElement;
    };
    interface HTMLSearchListItemElementEventMap {
        "searchItemChanged": any;
    }
    interface HTMLSearchListItemElement extends Components.SearchListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchListItemElementEventMap>(type: K, listener: (this: HTMLSearchListItemElement, ev: SearchListItemCustomEvent<HTMLSearchListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchListItemElementEventMap>(type: K, listener: (this: HTMLSearchListItemElement, ev: SearchListItemCustomEvent<HTMLSearchListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchListItemElement: {
        prototype: HTMLSearchListItemElement;
        new (): HTMLSearchListItemElement;
    };
    interface HTMLSelectableListElementEventMap {
        "udpFieldChange": Object[];
        "udpFieldBlur": Event;
    }
    interface HTMLSelectableListElement extends Components.SelectableList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSelectableListElementEventMap>(type: K, listener: (this: HTMLSelectableListElement, ev: SelectableListCustomEvent<HTMLSelectableListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSelectableListElementEventMap>(type: K, listener: (this: HTMLSelectableListElement, ev: SelectableListCustomEvent<HTMLSelectableListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSelectableListElement: {
        prototype: HTMLSelectableListElement;
        new (): HTMLSelectableListElement;
    };
    interface HTMLSideSheetElement extends Components.SideSheet, HTMLStencilElement {
    }
    var HTMLSideSheetElement: {
        prototype: HTMLSideSheetElement;
        new (): HTMLSideSheetElement;
    };
    interface HTMLSideSheetContainerElement extends Components.SideSheetContainer, HTMLStencilElement {
    }
    var HTMLSideSheetContainerElement: {
        prototype: HTMLSideSheetContainerElement;
        new (): HTMLSideSheetContainerElement;
    };
    interface HTMLSimpleCardElement extends Components.SimpleCard, HTMLStencilElement {
    }
    var HTMLSimpleCardElement: {
        prototype: HTMLSimpleCardElement;
        new (): HTMLSimpleCardElement;
    };
    interface HTMLStatusChipElement extends Components.StatusChip, HTMLStencilElement {
    }
    var HTMLStatusChipElement: {
        prototype: HTMLStatusChipElement;
        new (): HTMLStatusChipElement;
    };
    interface HTMLStencilChipElementEventMap {
        "onDelete": void;
        "onToggle": boolean;
        "udpChipClicked": string;
    }
    interface HTMLStencilChipElement extends Components.StencilChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStencilChipElementEventMap>(type: K, listener: (this: HTMLStencilChipElement, ev: StencilChipCustomEvent<HTMLStencilChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStencilChipElementEventMap>(type: K, listener: (this: HTMLStencilChipElement, ev: StencilChipCustomEvent<HTMLStencilChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStencilChipElement: {
        prototype: HTMLStencilChipElement;
        new (): HTMLStencilChipElement;
    };
    interface HTMLStencilFieldElement extends Components.StencilField, HTMLStencilElement {
    }
    var HTMLStencilFieldElement: {
        prototype: HTMLStencilFieldElement;
        new (): HTMLStencilFieldElement;
    };
    interface HTMLStencilFormElementEventMap {
        "stencilFormInvalidEvent": Object;
    }
    interface HTMLStencilFormElement extends Components.StencilForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStencilFormElementEventMap>(type: K, listener: (this: HTMLStencilFormElement, ev: StencilFormCustomEvent<HTMLStencilFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStencilFormElementEventMap>(type: K, listener: (this: HTMLStencilFormElement, ev: StencilFormCustomEvent<HTMLStencilFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStencilFormElement: {
        prototype: HTMLStencilFormElement;
        new (): HTMLStencilFormElement;
    };
    interface HTMLStencilIconButtonElement extends Components.StencilIconButton, HTMLStencilElement {
    }
    var HTMLStencilIconButtonElement: {
        prototype: HTMLStencilIconButtonElement;
        new (): HTMLStencilIconButtonElement;
    };
    interface HTMLStencilIconButtonGridActionHeaderElement extends Components.StencilIconButtonGridActionHeader, HTMLStencilElement {
    }
    var HTMLStencilIconButtonGridActionHeaderElement: {
        prototype: HTMLStencilIconButtonGridActionHeaderElement;
        new (): HTMLStencilIconButtonGridActionHeaderElement;
    };
    interface HTMLStencilToggleElementEventMap {
        "toggledChange": any;
    }
    interface HTMLStencilToggleElement extends Components.StencilToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStencilToggleElementEventMap>(type: K, listener: (this: HTMLStencilToggleElement, ev: StencilToggleCustomEvent<HTMLStencilToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStencilToggleElementEventMap>(type: K, listener: (this: HTMLStencilToggleElement, ev: StencilToggleCustomEvent<HTMLStencilToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStencilToggleElement: {
        prototype: HTMLStencilToggleElement;
        new (): HTMLStencilToggleElement;
    };
    interface HTMLTestApiElement extends Components.TestApi, HTMLStencilElement {
    }
    var HTMLTestApiElement: {
        prototype: HTMLTestApiElement;
        new (): HTMLTestApiElement;
    };
    interface HTMLTestApiUpdatedElement extends Components.TestApiUpdated, HTMLStencilElement {
    }
    var HTMLTestApiUpdatedElement: {
        prototype: HTMLTestApiUpdatedElement;
        new (): HTMLTestApiUpdatedElement;
    };
    interface HTMLTestFormElement extends Components.TestForm, HTMLStencilElement {
    }
    var HTMLTestFormElement: {
        prototype: HTMLTestFormElement;
        new (): HTMLTestFormElement;
    };
    interface HTMLTextAreaElementEventMap {
        "udpFieldFocus": FocusEvent;
        "udpFieldBlur": FocusEvent;
        "udpFieldChange": string;
    }
    interface HTMLTextAreaElement extends Components.TextArea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTextAreaElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: TextAreaCustomEvent<HTMLTextAreaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTextAreaElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: TextAreaCustomEvent<HTMLTextAreaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTextAreaElement: {
        prototype: HTMLTextAreaElement;
        new (): HTMLTextAreaElement;
    };
    interface HTMLTextFieldElementEventMap {
        "udpFieldFocus": FocusEvent;
        "udpFieldBlur": FocusEvent;
        "udpFieldChange": string;
    }
    interface HTMLTextFieldElement extends Components.TextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTextFieldElementEventMap>(type: K, listener: (this: HTMLTextFieldElement, ev: TextFieldCustomEvent<HTMLTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTextFieldElementEventMap>(type: K, listener: (this: HTMLTextFieldElement, ev: TextFieldCustomEvent<HTMLTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTextFieldElement: {
        prototype: HTMLTextFieldElement;
        new (): HTMLTextFieldElement;
    };
    interface HTMLToggleButtonElement extends Components.ToggleButton, HTMLStencilElement {
    }
    var HTMLToggleButtonElement: {
        prototype: HTMLToggleButtonElement;
        new (): HTMLToggleButtonElement;
    };
    interface HTMLTreeListItemElementEventMap {
        "itemClick": { searchField: string, searchOperator: string, searchValue: string, parentName?: string, parentPath?: string };
        "reference-clicked": { reference: string, name: string, parentReference?: string, parentFilter?: string, parent?: string, parentPath?: string };
    }
    interface HTMLTreeListItemElement extends Components.TreeListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTreeListItemElementEventMap>(type: K, listener: (this: HTMLTreeListItemElement, ev: TreeListItemCustomEvent<HTMLTreeListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTreeListItemElementEventMap>(type: K, listener: (this: HTMLTreeListItemElement, ev: TreeListItemCustomEvent<HTMLTreeListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTreeListItemElement: {
        prototype: HTMLTreeListItemElement;
        new (): HTMLTreeListItemElement;
    };
    interface HTMLUdpAdornmentElement extends Components.UdpAdornment, HTMLStencilElement {
    }
    var HTMLUdpAdornmentElement: {
        prototype: HTMLUdpAdornmentElement;
        new (): HTMLUdpAdornmentElement;
    };
    interface HTMLUdpAmbientCardElement extends Components.UdpAmbientCard, HTMLStencilElement {
    }
    var HTMLUdpAmbientCardElement: {
        prototype: HTMLUdpAmbientCardElement;
        new (): HTMLUdpAmbientCardElement;
    };
    interface HTMLUdpAmbientToolTipElement extends Components.UdpAmbientToolTip, HTMLStencilElement {
    }
    var HTMLUdpAmbientToolTipElement: {
        prototype: HTMLUdpAmbientToolTipElement;
        new (): HTMLUdpAmbientToolTipElement;
    };
    interface HTMLUdpAvatarElement extends Components.UdpAvatar, HTMLStencilElement {
    }
    var HTMLUdpAvatarElement: {
        prototype: HTMLUdpAvatarElement;
        new (): HTMLUdpAvatarElement;
    };
    interface HTMLUdpBadgeElement extends Components.UdpBadge, HTMLStencilElement {
    }
    var HTMLUdpBadgeElement: {
        prototype: HTMLUdpBadgeElement;
        new (): HTMLUdpBadgeElement;
    };
    interface HTMLUdpColumnHeaderElement extends Components.UdpColumnHeader, HTMLStencilElement {
    }
    var HTMLUdpColumnHeaderElement: {
        prototype: HTMLUdpColumnHeaderElement;
        new (): HTMLUdpColumnHeaderElement;
    };
    interface HTMLUdpDateSelectorElementEventMap {
        "udpFieldFocus": FocusEvent;
        "udpFieldBlur": FocusEvent;
        "udpFieldChange": string;
    }
    interface HTMLUdpDateSelectorElement extends Components.UdpDateSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpDateSelectorElementEventMap>(type: K, listener: (this: HTMLUdpDateSelectorElement, ev: UdpDateSelectorCustomEvent<HTMLUdpDateSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpDateSelectorElementEventMap>(type: K, listener: (this: HTMLUdpDateSelectorElement, ev: UdpDateSelectorCustomEvent<HTMLUdpDateSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpDateSelectorElement: {
        prototype: HTMLUdpDateSelectorElement;
        new (): HTMLUdpDateSelectorElement;
    };
    interface HTMLUdpDatetimeSelectorElementEventMap {
        "udpFieldFocus": FocusEvent;
        "udpFieldBlur": FocusEvent;
        "udpFieldChange": string;
    }
    interface HTMLUdpDatetimeSelectorElement extends Components.UdpDatetimeSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpDatetimeSelectorElementEventMap>(type: K, listener: (this: HTMLUdpDatetimeSelectorElement, ev: UdpDatetimeSelectorCustomEvent<HTMLUdpDatetimeSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpDatetimeSelectorElementEventMap>(type: K, listener: (this: HTMLUdpDatetimeSelectorElement, ev: UdpDatetimeSelectorCustomEvent<HTMLUdpDatetimeSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpDatetimeSelectorElement: {
        prototype: HTMLUdpDatetimeSelectorElement;
        new (): HTMLUdpDatetimeSelectorElement;
    };
    interface HTMLUdpDividerElement extends Components.UdpDivider, HTMLStencilElement {
    }
    var HTMLUdpDividerElement: {
        prototype: HTMLUdpDividerElement;
        new (): HTMLUdpDividerElement;
    };
    interface HTMLUdpDynamicContainerWithMenuElementEventMap {
        "udpChipClicked": string;
    }
    interface HTMLUdpDynamicContainerWithMenuElement extends Components.UdpDynamicContainerWithMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpDynamicContainerWithMenuElementEventMap>(type: K, listener: (this: HTMLUdpDynamicContainerWithMenuElement, ev: UdpDynamicContainerWithMenuCustomEvent<HTMLUdpDynamicContainerWithMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpDynamicContainerWithMenuElementEventMap>(type: K, listener: (this: HTMLUdpDynamicContainerWithMenuElement, ev: UdpDynamicContainerWithMenuCustomEvent<HTMLUdpDynamicContainerWithMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpDynamicContainerWithMenuElement: {
        prototype: HTMLUdpDynamicContainerWithMenuElement;
        new (): HTMLUdpDynamicContainerWithMenuElement;
    };
    interface HTMLUdpDynamicFormElement extends Components.UdpDynamicForm, HTMLStencilElement {
    }
    var HTMLUdpDynamicFormElement: {
        prototype: HTMLUdpDynamicFormElement;
        new (): HTMLUdpDynamicFormElement;
    };
    interface HTMLUdpFetchElementEventMap {
        "dataFetched": any;
    }
    interface HTMLUdpFetchElement extends Components.UdpFetch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpFetchElementEventMap>(type: K, listener: (this: HTMLUdpFetchElement, ev: UdpFetchCustomEvent<HTMLUdpFetchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpFetchElementEventMap>(type: K, listener: (this: HTMLUdpFetchElement, ev: UdpFetchCustomEvent<HTMLUdpFetchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpFetchElement: {
        prototype: HTMLUdpFetchElement;
        new (): HTMLUdpFetchElement;
    };
    interface HTMLUdpFormsRendererElement extends Components.UdpFormsRenderer, HTMLStencilElement {
    }
    var HTMLUdpFormsRendererElement: {
        prototype: HTMLUdpFormsRendererElement;
        new (): HTMLUdpFormsRendererElement;
    };
    interface HTMLUdpFunctionButtonElement extends Components.UdpFunctionButton, HTMLStencilElement {
    }
    var HTMLUdpFunctionButtonElement: {
        prototype: HTMLUdpFunctionButtonElement;
        new (): HTMLUdpFunctionButtonElement;
    };
    interface HTMLUdpGridLoaderElement extends Components.UdpGridLoader, HTMLStencilElement {
    }
    var HTMLUdpGridLoaderElement: {
        prototype: HTMLUdpGridLoaderElement;
        new (): HTMLUdpGridLoaderElement;
    };
    interface HTMLUdpHotlistFormElement extends Components.UdpHotlistForm, HTMLStencilElement {
    }
    var HTMLUdpHotlistFormElement: {
        prototype: HTMLUdpHotlistFormElement;
        new (): HTMLUdpHotlistFormElement;
    };
    interface HTMLUdpLinearLoaderElement extends Components.UdpLinearLoader, HTMLStencilElement {
    }
    var HTMLUdpLinearLoaderElement: {
        prototype: HTMLUdpLinearLoaderElement;
        new (): HTMLUdpLinearLoaderElement;
    };
    interface HTMLUdpMenuItemElementEventMap {
        "itemClick": any;
    }
    interface HTMLUdpMenuItemElement extends Components.UdpMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpMenuItemElementEventMap>(type: K, listener: (this: HTMLUdpMenuItemElement, ev: UdpMenuItemCustomEvent<HTMLUdpMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpMenuItemElementEventMap>(type: K, listener: (this: HTMLUdpMenuItemElement, ev: UdpMenuItemCustomEvent<HTMLUdpMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpMenuItemElement: {
        prototype: HTMLUdpMenuItemElement;
        new (): HTMLUdpMenuItemElement;
    };
    interface HTMLUdpNotificationElement extends Components.UdpNotification, HTMLStencilElement {
    }
    var HTMLUdpNotificationElement: {
        prototype: HTMLUdpNotificationElement;
        new (): HTMLUdpNotificationElement;
    };
    interface HTMLUdpPageElement extends Components.UdpPage, HTMLStencilElement {
    }
    var HTMLUdpPageElement: {
        prototype: HTMLUdpPageElement;
        new (): HTMLUdpPageElement;
    };
    interface HTMLUdpPageHeaderElementEventMap {
        "valueChanged": any;
    }
    interface HTMLUdpPageHeaderElement extends Components.UdpPageHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpPageHeaderElementEventMap>(type: K, listener: (this: HTMLUdpPageHeaderElement, ev: UdpPageHeaderCustomEvent<HTMLUdpPageHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpPageHeaderElementEventMap>(type: K, listener: (this: HTMLUdpPageHeaderElement, ev: UdpPageHeaderCustomEvent<HTMLUdpPageHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpPageHeaderElement: {
        prototype: HTMLUdpPageHeaderElement;
        new (): HTMLUdpPageHeaderElement;
    };
    interface HTMLUdpPopOverElement extends Components.UdpPopOver, HTMLStencilElement {
    }
    var HTMLUdpPopOverElement: {
        prototype: HTMLUdpPopOverElement;
        new (): HTMLUdpPopOverElement;
    };
    interface HTMLUdpPopOverGridActionHeaderElement extends Components.UdpPopOverGridActionHeader, HTMLStencilElement {
    }
    var HTMLUdpPopOverGridActionHeaderElement: {
        prototype: HTMLUdpPopOverGridActionHeaderElement;
        new (): HTMLUdpPopOverGridActionHeaderElement;
    };
    interface HTMLUdpQuestionElement extends Components.UdpQuestion, HTMLStencilElement {
    }
    var HTMLUdpQuestionElement: {
        prototype: HTMLUdpQuestionElement;
        new (): HTMLUdpQuestionElement;
    };
    interface HTMLUdpRadioButtonElement extends Components.UdpRadioButton, HTMLStencilElement {
    }
    var HTMLUdpRadioButtonElement: {
        prototype: HTMLUdpRadioButtonElement;
        new (): HTMLUdpRadioButtonElement;
    };
    interface HTMLUdpSelectorElementEventMap {
        "optionSelected": any;
        "udpFieldBlur": Event;
        "udpFieldChange": Object[];
    }
    interface HTMLUdpSelectorElement extends Components.UdpSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpSelectorElementEventMap>(type: K, listener: (this: HTMLUdpSelectorElement, ev: UdpSelectorCustomEvent<HTMLUdpSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpSelectorElementEventMap>(type: K, listener: (this: HTMLUdpSelectorElement, ev: UdpSelectorCustomEvent<HTMLUdpSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpSelectorElement: {
        prototype: HTMLUdpSelectorElement;
        new (): HTMLUdpSelectorElement;
    };
    interface HTMLUdpSkeletonLoadingElement extends Components.UdpSkeletonLoading, HTMLStencilElement {
    }
    var HTMLUdpSkeletonLoadingElement: {
        prototype: HTMLUdpSkeletonLoadingElement;
        new (): HTMLUdpSkeletonLoadingElement;
    };
    interface HTMLUdpSplitScreenElement extends Components.UdpSplitScreen, HTMLStencilElement {
    }
    var HTMLUdpSplitScreenElement: {
        prototype: HTMLUdpSplitScreenElement;
        new (): HTMLUdpSplitScreenElement;
    };
    interface HTMLUdpTabElement extends Components.UdpTab, HTMLStencilElement {
    }
    var HTMLUdpTabElement: {
        prototype: HTMLUdpTabElement;
        new (): HTMLUdpTabElement;
    };
    interface HTMLUdpTabsElement extends Components.UdpTabs, HTMLStencilElement {
    }
    var HTMLUdpTabsElement: {
        prototype: HTMLUdpTabsElement;
        new (): HTMLUdpTabsElement;
    };
    interface HTMLUdpTimeSelectorElementEventMap {
        "udpFieldFocus": FocusEvent;
        "udpFieldBlur": FocusEvent;
        "udpFieldChange": string;
    }
    interface HTMLUdpTimeSelectorElement extends Components.UdpTimeSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpTimeSelectorElementEventMap>(type: K, listener: (this: HTMLUdpTimeSelectorElement, ev: UdpTimeSelectorCustomEvent<HTMLUdpTimeSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpTimeSelectorElementEventMap>(type: K, listener: (this: HTMLUdpTimeSelectorElement, ev: UdpTimeSelectorCustomEvent<HTMLUdpTimeSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpTimeSelectorElement: {
        prototype: HTMLUdpTimeSelectorElement;
        new (): HTMLUdpTimeSelectorElement;
    };
    interface HTMLUdpUserCreatorElement extends Components.UdpUserCreator, HTMLStencilElement {
    }
    var HTMLUdpUserCreatorElement: {
        prototype: HTMLUdpUserCreatorElement;
        new (): HTMLUdpUserCreatorElement;
    };
    interface HTMLUdpVerticalSpacerElement extends Components.UdpVerticalSpacer, HTMLStencilElement {
    }
    var HTMLUdpVerticalSpacerElement: {
        prototype: HTMLUdpVerticalSpacerElement;
        new (): HTMLUdpVerticalSpacerElement;
    };
    interface HTMLUnityTypographyElement extends Components.UnityTypography, HTMLStencilElement {
    }
    var HTMLUnityTypographyElement: {
        prototype: HTMLUnityTypographyElement;
        new (): HTMLUnityTypographyElement;
    };
    interface HTMLUpdAlertBannerElement extends Components.UpdAlertBanner, HTMLStencilElement {
    }
    var HTMLUpdAlertBannerElement: {
        prototype: HTMLUpdAlertBannerElement;
        new (): HTMLUpdAlertBannerElement;
    };
    interface HTMLElementTagNameMap {
        "advanced-search": HTMLAdvancedSearchElement;
        "advanced-search-grouped": HTMLAdvancedSearchGroupedElement;
        "ag-table": HTMLAgTableElement;
        "ambient-demo-container": HTMLAmbientDemoContainerElement;
        "ambient-template-grid": HTMLAmbientTemplateGridElement;
        "app-bar": HTMLAppBarElement;
        "check-box": HTMLCheckBoxElement;
        "chip-section": HTMLChipSectionElement;
        "custom-button": HTMLCustomButtonElement;
        "edit-view-form-dialog": HTMLEditViewFormDialogElement;
        "file-upload": HTMLFileUploadElement;
        "filter-conditions": HTMLFilterConditionsElement;
        "fluent-dialog": HTMLFluentDialogElement;
        "get-user": HTMLGetUserElement;
        "grid-primary-bar": HTMLGridPrimaryBarElement;
        "hint-panel": HTMLHintPanelElement;
        "kpi-list": HTMLKpiListElement;
        "logical-search-indicator": HTMLLogicalSearchIndicatorElement;
        "my-component": HTMLMyComponentElement;
        "page-renderer": HTMLPageRendererElement;
        "primary-action-header": HTMLPrimaryActionHeaderElement;
        "save-view-form-dialog": HTMLSaveViewFormDialogElement;
        "search-list-item": HTMLSearchListItemElement;
        "selectable-list": HTMLSelectableListElement;
        "side-sheet": HTMLSideSheetElement;
        "side-sheet-container": HTMLSideSheetContainerElement;
        "simple-card": HTMLSimpleCardElement;
        "status-chip": HTMLStatusChipElement;
        "stencil-chip": HTMLStencilChipElement;
        "stencil-field": HTMLStencilFieldElement;
        "stencil-form": HTMLStencilFormElement;
        "stencil-icon-button": HTMLStencilIconButtonElement;
        "stencil-icon-button-grid-action-header": HTMLStencilIconButtonGridActionHeaderElement;
        "stencil-toggle": HTMLStencilToggleElement;
        "test-api": HTMLTestApiElement;
        "test-api-updated": HTMLTestApiUpdatedElement;
        "test-form": HTMLTestFormElement;
        "text-area": HTMLTextAreaElement;
        "text-field": HTMLTextFieldElement;
        "toggle-button": HTMLToggleButtonElement;
        "tree-list-item": HTMLTreeListItemElement;
        "udp-adornment": HTMLUdpAdornmentElement;
        "udp-ambient-card": HTMLUdpAmbientCardElement;
        "udp-ambient-tool-tip": HTMLUdpAmbientToolTipElement;
        "udp-avatar": HTMLUdpAvatarElement;
        "udp-badge": HTMLUdpBadgeElement;
        "udp-column-header": HTMLUdpColumnHeaderElement;
        "udp-date-selector": HTMLUdpDateSelectorElement;
        "udp-datetime-selector": HTMLUdpDatetimeSelectorElement;
        "udp-divider": HTMLUdpDividerElement;
        "udp-dynamic-container-with-menu": HTMLUdpDynamicContainerWithMenuElement;
        "udp-dynamic-form": HTMLUdpDynamicFormElement;
        "udp-fetch": HTMLUdpFetchElement;
        "udp-forms-renderer": HTMLUdpFormsRendererElement;
        "udp-function-button": HTMLUdpFunctionButtonElement;
        "udp-grid-loader": HTMLUdpGridLoaderElement;
        "udp-hotlist-form": HTMLUdpHotlistFormElement;
        "udp-linear-loader": HTMLUdpLinearLoaderElement;
        "udp-menu-item": HTMLUdpMenuItemElement;
        "udp-notification": HTMLUdpNotificationElement;
        "udp-page": HTMLUdpPageElement;
        "udp-page-header": HTMLUdpPageHeaderElement;
        "udp-pop-over": HTMLUdpPopOverElement;
        "udp-pop-over-grid-action-header": HTMLUdpPopOverGridActionHeaderElement;
        "udp-question": HTMLUdpQuestionElement;
        "udp-radio-button": HTMLUdpRadioButtonElement;
        "udp-selector": HTMLUdpSelectorElement;
        "udp-skeleton-loading": HTMLUdpSkeletonLoadingElement;
        "udp-split-screen": HTMLUdpSplitScreenElement;
        "udp-tab": HTMLUdpTabElement;
        "udp-tabs": HTMLUdpTabsElement;
        "udp-time-selector": HTMLUdpTimeSelectorElement;
        "udp-user-creator": HTMLUdpUserCreatorElement;
        "udp-vertical-spacer": HTMLUdpVerticalSpacerElement;
        "unity-typography": HTMLUnityTypographyElement;
        "upd-alert-banner": HTMLUpdAlertBannerElement;
    }
}
declare namespace LocalJSX {
    interface AdvancedSearch {
        "fetchFilters"?: Function;
        "filterList"?: any[];
        "filterRenderList"?: any[];
        "handleDelete"?: (arg0: object) => void;
        "handleItemClick"?: (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged"?: (event: CustomEvent) => void;
        "onAdvancedSearchItemChange"?: (event: AdvancedSearchCustomEvent<any>) => void;
    }
    interface AdvancedSearchGrouped {
        "fetchFilters"?: Function;
        "filterList"?: any[];
        "filterObjectsWithGroups"?: FilterGroup[];
        "filterRenderList"?: any[];
        "fullClearSearch"?: () => void;
        "handleAddNewFilter"?: (groupId: string, otherId: string) => void;
        "handleAddNewGroup"?: (groupId: string, logicalOperator: 'AND' | 'OR') => void;
        "handleDelete"?: (arg0: object) => void;
        "handleGroupItemDelete"?: (filterGroupId: string) => void;
        "handleItemClick"?: (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged"?: (event: CustomEvent) => void;
        "onAdvancedSearchItemChange"?: (event: AdvancedSearchGroupedCustomEvent<any>) => void;
        "onSearchItemChanged"?: (event: AdvancedSearchGroupedCustomEvent<any>) => void;
        "recentSearchesOptions"?: any[];
        "searchData"?: any;
        "selectRecentSearch"?: (e: any) => void;
        "updateLogicalOperator"?: (groupId: string, logicalOperator: 'AND' | 'OR') => void;
    }
    interface AgTable {
        "gridOptions"?: GridOptions;
        "height"?: string;
        "licensekey"?: string;
    }
    interface AmbientDemoContainer {
        "title"?: string;
    }
    interface AmbientTemplateGrid {
        "accessToken"?: string;
        "actionId"?: string;
        "additionalFilterChips"?: Array<any>;
        "apiCatalogId"?: string;
        "apiMethodId"?: string;
        "buttonTransform"?: string;
        "cellClickHandler"?: (value: any, callback: any) => void;
        "cellClickHandlerX"?: (value: any, callback: any) => void;
        "columnDefs"?: any[];
        "columnNames"?: { [key: string]: string };
        "dataEmitter"?: any;
        "dataEmitterRequest"?: any;
        "defaultSearchObject"?: Array<any>;
        "externalPayload"?: any;
        "externalSearchFilter"?: Array<any>;
        "filterObject"?: Array<any>;
        "fitGrid"?: string;
        "fullViewData"?: any;
        "gridBarTitle"?: string;
        "gridId"?: string;
        "gridState"?: any[];
        "hotListIdentifier"?: string;
        "kpiValues"?: Array<any>;
        "maxChipsAllowed"?: number;
        "menuItems"?: Array<any>;
        "noResults"?: boolean;
        "onExternalEmitter"?: (event: AmbientTemplateGridCustomEvent<any>) => void;
        "onSelectedIdsChanged"?: (event: AmbientTemplateGridCustomEvent<number[]>) => void;
        "onViewSaved"?: (event: AmbientTemplateGridCustomEvent<any>) => void;
        "productId"?: number;
        "queryId"?: string;
        "renderConfigs"?: RenderConfig[];
        "rowData"?: any[];
        "searchKey"?: Object;
        "showAdvancedSearchFeature"?: boolean;
        "showFilterColumnFeature"?: boolean;
        "showHotlistButton"?: boolean;
        "showRank"?: boolean;
        "suppressMenuHide"?: boolean;
        "tenantId"?: string;
        "userId"?: string;
        "viewActionClickHandler"?: (value: any, callback: any) => void;
        "viewChips"?: Array<any>;
        "viewListrowData"?: any[];
    }
    interface AppBar {
        "username"?: string;
    }
    interface CheckBox {
        "checked"?: boolean;
        "id"?: string;
        "label"?: string;
        "onCheckboxChanged"?: (event: CheckBoxCustomEvent<boolean>) => void;
    }
    interface ChipSection {
        "additionalFilterChips"?: Array<any>;
        "filterChips"?: Array<any>;
        "handleDelete"?: Function;
        "hideKpiSection"?: boolean;
        "kpiValues"?: Array<any>;
        "maxKPIsDisplayed"?: number;
        "menuItems"?: Array<any>;
        "viewChips"?: Array<any>;
    }
    interface CustomButton {
        "disabled"?: boolean;
        "label"?: string;
        "onCustomClick"?: (event: CustomButtonCustomEvent<void>) => void;
        "secondary"?: boolean;
        "size"?: 'default' | 'short' | 'tall';
        "type"?: 'button' | 'submit' | 'reset';
        "variant"?: 'default' | 'outline';
    }
    interface EditViewFormDialog {
        "apiCatalogId"?: any;
        "application"?: string;
        "closeDialog"?: any;
        "currentGridId"?: string;
        "currentGridViewVisibilityTypeId"?: number;
        "currentIsDefault"?: boolean;
        "currentName"?: string;
        "domain"?: any;
        "entity"?: string;
        "gApi"?: any;
        "gcApi"?: any;
        "gridId"?: any;
        "handleClose"?: Function;
        "handleFormSubmit"?: (gridId: any, name: string, isPrivate: number, isDefault: boolean) => void;
        "open"?: boolean;
        "refetchViews"?: () => void;
        "tenant"?: string;
        "title"?: string;
        "user"?: any;
    }
    interface FileUpload {
        "allowMultiple"?: boolean;
        "allowedFileTypes"?: Array<string>;
        "browseFileMessage"?: string;
        "disallowedFileTypes"?: Array<string>;
        "dragAndDropMessage"?: string;
        "error"?: string;
        "fullWidth"?: boolean;
        "hideButton"?: boolean;
        "hideDragAndDrop"?: boolean;
        "id"?: string;
        "onUdpFieldBlur"?: (event: FileUploadCustomEvent<Event>) => void;
        "onUdpFieldChange"?: (event: FileUploadCustomEvent<File[]>) => void;
        "required"?: boolean;
    }
    interface FilterConditions {
    }
    interface FluentDialog {
        "actionOne"?: Function;
        "actionTwo"?: Function;
        "ariaDescribedby"?: string;
        "ariaLabelledby"?: string;
        "buttonOneHidden"?: boolean;
        "buttonTwoHidden"?: boolean;
        "descriptionId"?: string;
        "disableOne"?: boolean;
        "disableTwo"?: boolean;
        "handleClose"?: Function;
        "labelOne"?: string;
        "labelTwo"?: string;
        "message"?: string;
        "open"?: boolean;
        "progress"?: number;
        "title"?: string;
        "titleId"?: string;
    }
    interface GetUser {
        "accessToken"?: string;
        "onUserDataReady"?: (event: GetUserCustomEvent<any>) => void;
    }
    interface GridPrimaryBar {
        "actionButtons"?: any[];
        "customAdvancedSearchClick"?: (event?: MouseEvent) => void;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customInsightsClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowCustomSearchClick"?: (event?: MouseEvent) => void;
        "customShowGridOptionsClick"?: (event?: MouseEvent) => void;
        "customShowHotlistClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "customToggleServerClientClick"?: (event?: MouseEvent) => void;
        "hiddenActionButtons"?: string[];
        "hiddenLabels"?: string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "showAdvancedSearchFeature"?: boolean;
        "showFilterColumnFeature"?: boolean;
        "showGridOptions"?: boolean;
        "showHotlistButton"?: boolean;
        "title"?: string;
    }
    interface HintPanel {
        "hideHintText"?: string;
        "hint"?: string;
    }
    interface KpiList {
        "kpiValues"?: Array<{ label: string, value: number }>;
    }
    interface LogicalSearchIndicator {
        "type"?: number;
    }
    interface MyComponent {
        "accessTokenProp"?: string;
        "first"?: string;
        "last"?: string;
        "middle"?: string;
    }
    interface PageRenderer {
        "accessToken"?: string;
        "gridId"?: string;
        "pageData"?: any;
        "productId"?: string;
        "tenantId"?: string;
        "userId"?: string;
    }
    interface PrimaryActionHeader {
        "actionButtonLabel"?: string;
        "actionButtons"?: any[];
        "activeTabIndex"?: number;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "defaultActionButtons"?: any[];
        "hiddenActionButtons"?: string[];
        "hiddenLabels"?: string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "selectTab"?: (index: number) => void;
        "tabs"?: boolean;
        "title"?: string;
    }
    interface SaveViewFormDialog {
        "apiCatalogId"?: any;
        "application"?: string;
        "closeDialog"?: any;
        "domain"?: any;
        "entity"?: string;
        "gApi"?: any;
        "gcApi"?: any;
        "gridId"?: any;
        "handleClose"?: Function;
        "handleFormSubmit"?: (name: string, isPrivate: number, isDefault: boolean) => void;
        "open"?: boolean;
        "refetchViews"?: () => void;
        "tenant"?: string;
        "title"?: string;
        "user"?: any;
    }
    interface SearchListItem {
        "groupId"?: string;
        "handleDelete"?: (event: MouseEvent) => void;
        "label"?: string;
        "name"?: string;
        "onSearchItemChanged"?: (event: SearchListItemCustomEvent<any>) => void;
        "operator"?: string;
    }
    interface SelectableList {
        "disableSelection"?: boolean;
        "displayKey"?: string;
        "error"?: string;
        "id"?: string;
        "items"?: any[];
        "multiSelect"?: boolean;
        "onInput"?: (event: Event) => void;
        "onUdpFieldBlur"?: (event: SelectableListCustomEvent<Event>) => void;
        "onUdpFieldChange"?: (event: SelectableListCustomEvent<Object[]>) => void;
        "required"?: boolean;
        "useCheckbox"?: boolean;
        "value"?: string;
        "valueKey"?: string;
    }
    interface SideSheet {
        "buttonLabel"?: string;
        "buttonTransform"?: string;
        "disabled"?: boolean;
        "handleSideSheetButton"?: () => void;
        "open"?: boolean;
        "padding"?: boolean;
        "position"?: 'left' | 'right';
        "sideSheetButtonLabel"?: string;
        "title"?: string;
        "toggleDrawer"?: () => void;
        "widthOption"?: 'short' | 'long' | number;
    }
    interface SideSheetContainer {
        "padding"?: boolean;
    }
    interface SimpleCard {
    }
    interface StatusChip {
        "statusClasses"?: { [key: string]: string };
        "statusValue"?: string | boolean;
    }
    interface StencilChip {
        "color"?: 'primary' | 'secondary';
        "defaultToggled"?: boolean;
        "externalToggleString"?: string;
        "leftIcon"?: any;
        "level"?: number;
        "onOnDelete"?: (event: StencilChipCustomEvent<void>) => void;
        "onOnToggle"?: (event: StencilChipCustomEvent<boolean>) => void;
        "onUdpChipClicked"?: (event: StencilChipCustomEvent<string>) => void;
        "showDelete"?: boolean;
        "showLeftIcon"?: boolean;
        "text"?: string;
    }
    interface StencilField {
        "component"?: string;
        "componentProps"?: Object;
        "defaultValue"?: string;
        "id"?: string;
        "label"?: string;
        "name"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface StencilForm {
        "handleSubmit"?: (values: Object) => void;
        "initialValues"?: Object;
        "onStencilFormInvalidEvent"?: (event: StencilFormCustomEvent<Object>) => void;
        "validate"?: (values: Object, errors: Object) => Object;
        "validateOnBlur"?: boolean;
    }
    interface StencilIconButton {
        "darkIcon"?: boolean;
        "icon"?: any;
        "iconClassName"?: string;
        "iconName"?: string;
        "noBackground"?: boolean;
        "onClick"?: (event: MouseEvent) => void;
        "secondary"?: boolean;
        "showLabel"?: boolean;
        "tooltip"?: string;
    }
    interface StencilIconButtonGridActionHeader {
        "darkIcon"?: boolean;
        "icon"?: any;
        "iconClassName"?: string;
        "iconName"?: string;
        "noBackground"?: boolean;
        "onClick"?: (event: MouseEvent) => void;
        "secondary"?: boolean;
        "showLabel"?: boolean;
        "tooltip"?: string;
    }
    interface StencilToggle {
        "checked"?: boolean;
        "disabled"?: boolean;
        "idItem"?: string;
        "label"?: string;
        "onToggledChange"?: (event: StencilToggleCustomEvent<any>) => void;
    }
    interface TestApi {
    }
    interface TestApiUpdated {
    }
    interface TestForm {
    }
    interface TextArea {
        "disabled"?: boolean;
        "error"?: string;
        "fullWidth"?: boolean;
        "handleBlur"?: (event: FocusEvent) => void;
        "handleChange"?: (event: Event) => void;
        "handleFocus"?: (event: FocusEvent) => void;
        "id"?: string;
        "label"?: string;
        "maxCharacter"?: number;
        "onUdpFieldBlur"?: (event: TextAreaCustomEvent<FocusEvent>) => void;
        "onUdpFieldChange"?: (event: TextAreaCustomEvent<string>) => void;
        "onUdpFieldFocus"?: (event: TextAreaCustomEvent<FocusEvent>) => void;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "rows"?: number;
        "value"?: string;
    }
    interface TextField {
        "disabled"?: boolean;
        "error"?: string;
        "handleBlur"?: (event: Event) => void;
        "handleFocus"?: (event: Event) => void;
        "handleInput"?: (event: Event) => void;
        "hidden"?: boolean;
        "id"?: string;
        "label"?: string;
        "maxCharacter"?: number;
        "onUdpFieldBlur"?: (event: TextFieldCustomEvent<FocusEvent>) => void;
        "onUdpFieldChange"?: (event: TextFieldCustomEvent<string>) => void;
        "onUdpFieldFocus"?: (event: TextFieldCustomEvent<FocusEvent>) => void;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "required"?: boolean;
        "value"?: string;
    }
    interface ToggleButton {
        "onToggle"?: () => void;
        "toggled"?: boolean;
    }
    interface TreeListItem {
        "add"?: boolean;
        "customAttribute"?: string;
        "dataOne"?: string;
        "dataTwo"?: string;
        "deleteHandler"?: (event: MouseEvent) => void;
        "editHandler"?: (event: MouseEvent) => void;
        "gridViewVisibilityTypeId"?: number;
        "isDefault"?: boolean;
        "label"?: string;
        "level"?: number;
        "nestedItems"?: any[];
        "onItemClick"?: (event: TreeListItemCustomEvent<{ searchField: string, searchOperator: string, searchValue: string, parentName?: string, parentPath?: string }>) => void;
        "onReference-clicked"?: (event: TreeListItemCustomEvent<{ reference: string, name: string, parentReference?: string, parentFilter?: string, parent?: string, parentPath?: string }>) => void;
        "parent"?: string;
        "parentFilter"?: any;
        "parentName"?: string;
        "parentPath"?: string;
        "reference"?: string | null;
        "showAdd"?: boolean;
        "showDeleteOption"?: boolean;
        "showEditOption"?: boolean;
        "showUpdateDefaultOption"?: boolean;
        "showViewOption"?: boolean;
        "statusClasses"?: { [key: string]: string };
        "statusKey"?: string;
        "statusLabel"?: string;
        "statusValue"?: boolean;
        "test"?: string;
        "updateDefaultHandler"?: (event: MouseEvent) => void;
        "viewHandler"?: (event: MouseEvent) => void;
    }
    interface UdpAdornment {
        "status"?: 'success' | 'warning' | 'error' | 'info' | 'disabled';
    }
    interface UdpAmbientCard {
        "moreText"?: string;
        "overflow"?: string;
        "width"?: string;
    }
    interface UdpAmbientToolTip {
        "content"?: string;
    }
    interface UdpAvatar {
        "username"?: string;
    }
    interface UdpBadge {
        "content"?: number;
        "max"?: number;
    }
    interface UdpColumnHeader {
    }
    interface UdpDateSelector {
        "error"?: string;
        "id"?: string;
        "label"?: string;
        /**
          * Maximum date, supports any date supported by the js Date constructor
         */
        "max"?: string;
        /**
          * Minimum date, supports any date supported by the js Date constructor
         */
        "min"?: string;
        "onUdpFieldBlur"?: (event: UdpDateSelectorCustomEvent<FocusEvent>) => void;
        "onUdpFieldChange"?: (event: UdpDateSelectorCustomEvent<string>) => void;
        "onUdpFieldFocus"?: (event: UdpDateSelectorCustomEvent<FocusEvent>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface UdpDatetimeSelector {
        "error"?: string;
        "id"?: string;
        "label"?: string;
        /**
          * Maximum date, supports any date supported by the js Date constructor
         */
        "max"?: string;
        /**
          * Minimum date, supports any date supported by the js Date constructor
         */
        "min"?: string;
        "onUdpFieldBlur"?: (event: UdpDatetimeSelectorCustomEvent<FocusEvent>) => void;
        "onUdpFieldChange"?: (event: UdpDatetimeSelectorCustomEvent<string>) => void;
        "onUdpFieldFocus"?: (event: UdpDatetimeSelectorCustomEvent<FocusEvent>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface UdpDivider {
        "size"?: string;
        "variant"?: 'horizontal' | 'vertical';
    }
    interface UdpDynamicContainerWithMenu {
        "externalToggle"?: string;
        "menuItems"?: any[];
        "onUdpChipClicked"?: (event: UdpDynamicContainerWithMenuCustomEvent<string>) => void;
    }
    interface UdpDynamicForm {
    }
    interface UdpFetch {
        "accessToken"?: string;
        "isServerSide"?: boolean;
        "onDataFetched"?: (event: UdpFetchCustomEvent<any>) => void;
        "promotedEntity"?: any;
        "tenantId"?: string;
    }
    interface UdpFormsRenderer {
        "apiUrlBase"?: string;
        "callbackUrl"?: string;
        "formId"?: Guid;
        "getAccessToken"?: () => Promise<string>;
        "isPublic"?: boolean;
        "productId"?: number;
        "tenantId"?: Guid;
        "triggerAction"?: (actionId: Guid, params: Object) => void;
        "unityUrl"?: string;
        "version"?: number;
    }
    interface UdpFunctionButton {
        "add"?: boolean;
        "delete"?: boolean;
        "edit"?: boolean;
        "expand"?: boolean;
        "isDefault"?: boolean;
        "noBackground"?: boolean;
        "view"?: boolean;
    }
    interface UdpGridLoader {
        "numColumns"?: number;
        "numRows"?: number;
        "width"?: string;
    }
    interface UdpHotlistForm {
        "handleCancelClick"?: () => void;
        "handleFormSubmit"?: (name: string, isPrivate: boolean, columnState: any) => void;
        "refetchViews"?: () => void;
    }
    interface UdpLinearLoader {
    }
    interface UdpMenuItem {
        "label"?: string;
        "onItemClick"?: (event: UdpMenuItemCustomEvent<any>) => void;
    }
    interface UdpNotification {
        "active"?: boolean;
        "message"?: string;
        "status"?: 'success' | 'error' | 'warning';
        "userCancel"?: boolean;
    }
    interface UdpPage {
        /**
          * Optional maximum page width
         */
        "maxWidth"?: string;
        /**
          * Default padding for the layout
         */
        "padding"?: string;
    }
    interface UdpPageHeader {
        "onValueChanged"?: (event: UdpPageHeaderCustomEvent<any>) => void;
    }
    interface UdpPopOver {
        "anchorElement"?: HTMLElement;
        "isOpen"?: boolean;
    }
    interface UdpPopOverGridActionHeader {
        "anchorElement"?: HTMLElement;
        "isOpen"?: boolean;
    }
    interface UdpQuestion {
        "question"?: Question;
        "questionNumber"?: number;
        "styleOverrides"?: {
    helperText: FontOverrides;
    questionText: FontOverrides;
    paragraphText: FontOverrides;
  };
        "value"?: string;
    }
    interface UdpRadioButton {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "name"?: string;
        "value"?: string;
    }
    interface UdpSelector {
        "defaultOption"?: string;
        "error"?: string;
        "fieldName"?: string;
        "id"?: string;
        "label"?: string;
        "large"?: boolean;
        "multiSelect"?: boolean;
        "onOptionSelected"?: (event: UdpSelectorCustomEvent<any>) => void;
        "onUdpFieldBlur"?: (event: UdpSelectorCustomEvent<Event>) => void;
        "onUdpFieldChange"?: (event: UdpSelectorCustomEvent<Object[]>) => void;
        "options"?: Array<{ value: string; label: string }>;
        "required"?: boolean;
    }
    interface UdpSkeletonLoading {
        "borderRadius"?: string;
        "height"?: string;
        "width"?: string;
    }
    interface UdpSplitScreen {
        "panelContent"?: string;
    }
    interface UdpTab {
        "active"?: boolean;
        "title"?: string;
    }
    interface UdpTabs {
    }
    interface UdpTimeSelector {
        "error"?: string;
        "id"?: string;
        "label"?: string;
        "max"?: string;
        "min"?: string;
        "onUdpFieldBlur"?: (event: UdpTimeSelectorCustomEvent<FocusEvent>) => void;
        "onUdpFieldChange"?: (event: UdpTimeSelectorCustomEvent<string>) => void;
        "onUdpFieldFocus"?: (event: UdpTimeSelectorCustomEvent<FocusEvent>) => void;
        "required"?: boolean;
        "value"?: string;
    }
    interface UdpUserCreator {
    }
    interface UdpVerticalSpacer {
        "unit"?: 'small' | 'medium' | 'large';
    }
    interface UnityTypography {
        "variant"?: TypographyVariant;
    }
    interface UpdAlertBanner {
        "message"?: string;
        "onClick"?: () => void;
        "type"?: 'info' | 'warning' | 'error' | 'success';
    }
    interface IntrinsicElements {
        "advanced-search": AdvancedSearch;
        "advanced-search-grouped": AdvancedSearchGrouped;
        "ag-table": AgTable;
        "ambient-demo-container": AmbientDemoContainer;
        "ambient-template-grid": AmbientTemplateGrid;
        "app-bar": AppBar;
        "check-box": CheckBox;
        "chip-section": ChipSection;
        "custom-button": CustomButton;
        "edit-view-form-dialog": EditViewFormDialog;
        "file-upload": FileUpload;
        "filter-conditions": FilterConditions;
        "fluent-dialog": FluentDialog;
        "get-user": GetUser;
        "grid-primary-bar": GridPrimaryBar;
        "hint-panel": HintPanel;
        "kpi-list": KpiList;
        "logical-search-indicator": LogicalSearchIndicator;
        "my-component": MyComponent;
        "page-renderer": PageRenderer;
        "primary-action-header": PrimaryActionHeader;
        "save-view-form-dialog": SaveViewFormDialog;
        "search-list-item": SearchListItem;
        "selectable-list": SelectableList;
        "side-sheet": SideSheet;
        "side-sheet-container": SideSheetContainer;
        "simple-card": SimpleCard;
        "status-chip": StatusChip;
        "stencil-chip": StencilChip;
        "stencil-field": StencilField;
        "stencil-form": StencilForm;
        "stencil-icon-button": StencilIconButton;
        "stencil-icon-button-grid-action-header": StencilIconButtonGridActionHeader;
        "stencil-toggle": StencilToggle;
        "test-api": TestApi;
        "test-api-updated": TestApiUpdated;
        "test-form": TestForm;
        "text-area": TextArea;
        "text-field": TextField;
        "toggle-button": ToggleButton;
        "tree-list-item": TreeListItem;
        "udp-adornment": UdpAdornment;
        "udp-ambient-card": UdpAmbientCard;
        "udp-ambient-tool-tip": UdpAmbientToolTip;
        "udp-avatar": UdpAvatar;
        "udp-badge": UdpBadge;
        "udp-column-header": UdpColumnHeader;
        "udp-date-selector": UdpDateSelector;
        "udp-datetime-selector": UdpDatetimeSelector;
        "udp-divider": UdpDivider;
        "udp-dynamic-container-with-menu": UdpDynamicContainerWithMenu;
        "udp-dynamic-form": UdpDynamicForm;
        "udp-fetch": UdpFetch;
        "udp-forms-renderer": UdpFormsRenderer;
        "udp-function-button": UdpFunctionButton;
        "udp-grid-loader": UdpGridLoader;
        "udp-hotlist-form": UdpHotlistForm;
        "udp-linear-loader": UdpLinearLoader;
        "udp-menu-item": UdpMenuItem;
        "udp-notification": UdpNotification;
        "udp-page": UdpPage;
        "udp-page-header": UdpPageHeader;
        "udp-pop-over": UdpPopOver;
        "udp-pop-over-grid-action-header": UdpPopOverGridActionHeader;
        "udp-question": UdpQuestion;
        "udp-radio-button": UdpRadioButton;
        "udp-selector": UdpSelector;
        "udp-skeleton-loading": UdpSkeletonLoading;
        "udp-split-screen": UdpSplitScreen;
        "udp-tab": UdpTab;
        "udp-tabs": UdpTabs;
        "udp-time-selector": UdpTimeSelector;
        "udp-user-creator": UdpUserCreator;
        "udp-vertical-spacer": UdpVerticalSpacer;
        "unity-typography": UnityTypography;
        "upd-alert-banner": UpdAlertBanner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "advanced-search": LocalJSX.AdvancedSearch & JSXBase.HTMLAttributes<HTMLAdvancedSearchElement>;
            "advanced-search-grouped": LocalJSX.AdvancedSearchGrouped & JSXBase.HTMLAttributes<HTMLAdvancedSearchGroupedElement>;
            "ag-table": LocalJSX.AgTable & JSXBase.HTMLAttributes<HTMLAgTableElement>;
            "ambient-demo-container": LocalJSX.AmbientDemoContainer & JSXBase.HTMLAttributes<HTMLAmbientDemoContainerElement>;
            "ambient-template-grid": LocalJSX.AmbientTemplateGrid & JSXBase.HTMLAttributes<HTMLAmbientTemplateGridElement>;
            "app-bar": LocalJSX.AppBar & JSXBase.HTMLAttributes<HTMLAppBarElement>;
            "check-box": LocalJSX.CheckBox & JSXBase.HTMLAttributes<HTMLCheckBoxElement>;
            "chip-section": LocalJSX.ChipSection & JSXBase.HTMLAttributes<HTMLChipSectionElement>;
            "custom-button": LocalJSX.CustomButton & JSXBase.HTMLAttributes<HTMLCustomButtonElement>;
            "edit-view-form-dialog": LocalJSX.EditViewFormDialog & JSXBase.HTMLAttributes<HTMLEditViewFormDialogElement>;
            "file-upload": LocalJSX.FileUpload & JSXBase.HTMLAttributes<HTMLFileUploadElement>;
            "filter-conditions": LocalJSX.FilterConditions & JSXBase.HTMLAttributes<HTMLFilterConditionsElement>;
            "fluent-dialog": LocalJSX.FluentDialog & JSXBase.HTMLAttributes<HTMLFluentDialogElement>;
            "get-user": LocalJSX.GetUser & JSXBase.HTMLAttributes<HTMLGetUserElement>;
            "grid-primary-bar": LocalJSX.GridPrimaryBar & JSXBase.HTMLAttributes<HTMLGridPrimaryBarElement>;
            "hint-panel": LocalJSX.HintPanel & JSXBase.HTMLAttributes<HTMLHintPanelElement>;
            "kpi-list": LocalJSX.KpiList & JSXBase.HTMLAttributes<HTMLKpiListElement>;
            "logical-search-indicator": LocalJSX.LogicalSearchIndicator & JSXBase.HTMLAttributes<HTMLLogicalSearchIndicatorElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "page-renderer": LocalJSX.PageRenderer & JSXBase.HTMLAttributes<HTMLPageRendererElement>;
            "primary-action-header": LocalJSX.PrimaryActionHeader & JSXBase.HTMLAttributes<HTMLPrimaryActionHeaderElement>;
            "save-view-form-dialog": LocalJSX.SaveViewFormDialog & JSXBase.HTMLAttributes<HTMLSaveViewFormDialogElement>;
            "search-list-item": LocalJSX.SearchListItem & JSXBase.HTMLAttributes<HTMLSearchListItemElement>;
            "selectable-list": LocalJSX.SelectableList & JSXBase.HTMLAttributes<HTMLSelectableListElement>;
            "side-sheet": LocalJSX.SideSheet & JSXBase.HTMLAttributes<HTMLSideSheetElement>;
            "side-sheet-container": LocalJSX.SideSheetContainer & JSXBase.HTMLAttributes<HTMLSideSheetContainerElement>;
            "simple-card": LocalJSX.SimpleCard & JSXBase.HTMLAttributes<HTMLSimpleCardElement>;
            "status-chip": LocalJSX.StatusChip & JSXBase.HTMLAttributes<HTMLStatusChipElement>;
            "stencil-chip": LocalJSX.StencilChip & JSXBase.HTMLAttributes<HTMLStencilChipElement>;
            "stencil-field": LocalJSX.StencilField & JSXBase.HTMLAttributes<HTMLStencilFieldElement>;
            "stencil-form": LocalJSX.StencilForm & JSXBase.HTMLAttributes<HTMLStencilFormElement>;
            "stencil-icon-button": LocalJSX.StencilIconButton & JSXBase.HTMLAttributes<HTMLStencilIconButtonElement>;
            "stencil-icon-button-grid-action-header": LocalJSX.StencilIconButtonGridActionHeader & JSXBase.HTMLAttributes<HTMLStencilIconButtonGridActionHeaderElement>;
            "stencil-toggle": LocalJSX.StencilToggle & JSXBase.HTMLAttributes<HTMLStencilToggleElement>;
            "test-api": LocalJSX.TestApi & JSXBase.HTMLAttributes<HTMLTestApiElement>;
            "test-api-updated": LocalJSX.TestApiUpdated & JSXBase.HTMLAttributes<HTMLTestApiUpdatedElement>;
            "test-form": LocalJSX.TestForm & JSXBase.HTMLAttributes<HTMLTestFormElement>;
            "text-area": LocalJSX.TextArea & JSXBase.HTMLAttributes<HTMLTextAreaElement>;
            "text-field": LocalJSX.TextField & JSXBase.HTMLAttributes<HTMLTextFieldElement>;
            "toggle-button": LocalJSX.ToggleButton & JSXBase.HTMLAttributes<HTMLToggleButtonElement>;
            "tree-list-item": LocalJSX.TreeListItem & JSXBase.HTMLAttributes<HTMLTreeListItemElement>;
            "udp-adornment": LocalJSX.UdpAdornment & JSXBase.HTMLAttributes<HTMLUdpAdornmentElement>;
            "udp-ambient-card": LocalJSX.UdpAmbientCard & JSXBase.HTMLAttributes<HTMLUdpAmbientCardElement>;
            "udp-ambient-tool-tip": LocalJSX.UdpAmbientToolTip & JSXBase.HTMLAttributes<HTMLUdpAmbientToolTipElement>;
            "udp-avatar": LocalJSX.UdpAvatar & JSXBase.HTMLAttributes<HTMLUdpAvatarElement>;
            "udp-badge": LocalJSX.UdpBadge & JSXBase.HTMLAttributes<HTMLUdpBadgeElement>;
            "udp-column-header": LocalJSX.UdpColumnHeader & JSXBase.HTMLAttributes<HTMLUdpColumnHeaderElement>;
            "udp-date-selector": LocalJSX.UdpDateSelector & JSXBase.HTMLAttributes<HTMLUdpDateSelectorElement>;
            "udp-datetime-selector": LocalJSX.UdpDatetimeSelector & JSXBase.HTMLAttributes<HTMLUdpDatetimeSelectorElement>;
            "udp-divider": LocalJSX.UdpDivider & JSXBase.HTMLAttributes<HTMLUdpDividerElement>;
            "udp-dynamic-container-with-menu": LocalJSX.UdpDynamicContainerWithMenu & JSXBase.HTMLAttributes<HTMLUdpDynamicContainerWithMenuElement>;
            "udp-dynamic-form": LocalJSX.UdpDynamicForm & JSXBase.HTMLAttributes<HTMLUdpDynamicFormElement>;
            "udp-fetch": LocalJSX.UdpFetch & JSXBase.HTMLAttributes<HTMLUdpFetchElement>;
            "udp-forms-renderer": LocalJSX.UdpFormsRenderer & JSXBase.HTMLAttributes<HTMLUdpFormsRendererElement>;
            "udp-function-button": LocalJSX.UdpFunctionButton & JSXBase.HTMLAttributes<HTMLUdpFunctionButtonElement>;
            "udp-grid-loader": LocalJSX.UdpGridLoader & JSXBase.HTMLAttributes<HTMLUdpGridLoaderElement>;
            "udp-hotlist-form": LocalJSX.UdpHotlistForm & JSXBase.HTMLAttributes<HTMLUdpHotlistFormElement>;
            "udp-linear-loader": LocalJSX.UdpLinearLoader & JSXBase.HTMLAttributes<HTMLUdpLinearLoaderElement>;
            "udp-menu-item": LocalJSX.UdpMenuItem & JSXBase.HTMLAttributes<HTMLUdpMenuItemElement>;
            "udp-notification": LocalJSX.UdpNotification & JSXBase.HTMLAttributes<HTMLUdpNotificationElement>;
            "udp-page": LocalJSX.UdpPage & JSXBase.HTMLAttributes<HTMLUdpPageElement>;
            "udp-page-header": LocalJSX.UdpPageHeader & JSXBase.HTMLAttributes<HTMLUdpPageHeaderElement>;
            "udp-pop-over": LocalJSX.UdpPopOver & JSXBase.HTMLAttributes<HTMLUdpPopOverElement>;
            "udp-pop-over-grid-action-header": LocalJSX.UdpPopOverGridActionHeader & JSXBase.HTMLAttributes<HTMLUdpPopOverGridActionHeaderElement>;
            "udp-question": LocalJSX.UdpQuestion & JSXBase.HTMLAttributes<HTMLUdpQuestionElement>;
            "udp-radio-button": LocalJSX.UdpRadioButton & JSXBase.HTMLAttributes<HTMLUdpRadioButtonElement>;
            "udp-selector": LocalJSX.UdpSelector & JSXBase.HTMLAttributes<HTMLUdpSelectorElement>;
            "udp-skeleton-loading": LocalJSX.UdpSkeletonLoading & JSXBase.HTMLAttributes<HTMLUdpSkeletonLoadingElement>;
            "udp-split-screen": LocalJSX.UdpSplitScreen & JSXBase.HTMLAttributes<HTMLUdpSplitScreenElement>;
            "udp-tab": LocalJSX.UdpTab & JSXBase.HTMLAttributes<HTMLUdpTabElement>;
            "udp-tabs": LocalJSX.UdpTabs & JSXBase.HTMLAttributes<HTMLUdpTabsElement>;
            "udp-time-selector": LocalJSX.UdpTimeSelector & JSXBase.HTMLAttributes<HTMLUdpTimeSelectorElement>;
            "udp-user-creator": LocalJSX.UdpUserCreator & JSXBase.HTMLAttributes<HTMLUdpUserCreatorElement>;
            "udp-vertical-spacer": LocalJSX.UdpVerticalSpacer & JSXBase.HTMLAttributes<HTMLUdpVerticalSpacerElement>;
            "unity-typography": LocalJSX.UnityTypography & JSXBase.HTMLAttributes<HTMLUnityTypographyElement>;
            "upd-alert-banner": LocalJSX.UpdAlertBanner & JSXBase.HTMLAttributes<HTMLUpdAlertBannerElement>;
        }
    }
}
