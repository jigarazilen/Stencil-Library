/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FilterGroup } from "../packages/stencil-library/src/components/my-component/UI/advanced-search/advanced-search-grouped";
import { GridOptions } from "ag-grid-community";
import { User } from "../packages/stencil-library/src/udp-utilities/udp-user-creator";
import { TypographyVariant } from "../packages/stencil-library/src/components/my-component/unity-typography";
export { FilterGroup } from "../packages/stencil-library/src/components/my-component/UI/advanced-search/advanced-search-grouped";
export { GridOptions } from "ag-grid-community";
export { User } from "../packages/stencil-library/src/udp-utilities/udp-user-creator";
export { TypographyVariant } from "../packages/stencil-library/src/components/my-component/unity-typography";
export namespace Components {
    interface AdvancedSearch {
        "fetchFilters": Function;
        "filterList": any[];
        "filterRenderList": any[];
        "handleDelete": (arg0: object) => void;
        "handleItemClick": (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged": (event: CustomEvent) => void;
    }
    interface AdvancedSearchGrouped {
        "fetchFilters": Function;
        "filterList": any[];
        "filterObjectsWithGroups": FilterGroup[];
        "filterRenderList": any[];
        "handleAddNewFilter": (groupId: string, otherId: string) => void;
        "handleAddNewGroup": (groupId: string, logicalOperator: 'AND' | 'OR') => void;
        "handleDelete": (arg0: object) => void;
        "handleGroupItemDelete": (filterGroupId: string) => void;
        "handleItemClick": (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged": (event: CustomEvent) => void;
        "searchData": any;
        "updateLogicalOperator": (groupId: string, logicalOperator: 'AND' | 'OR') => void;
    }
    interface AgGrid {
        "columnDefs": any[];
        "gridId": string;
        "gridState": any[];
        "handleFormSubmit": (name: string, isPrivate: boolean, columnState: any[]) => void;
        "rowData": any[];
    }
    interface AgTable {
        "gridOptions": GridOptions;
        "height": string;
        "licensekey": string;
    }
    interface AmbientDemoContainer {
        "title": string;
    }
    interface AmbientTemplateGrid {
        "accessToken": string;
        "actionId": string;
        "additionalFilterChips": Array<any>;
        "apiCatalogId": string;
        "apiMethodId": string;
        "cellClickHandler": (value: any, callback: any) => void;
        "cellClickHandlerX": (value: any, callback: any) => void;
        "columnDefs": any[];
        "dataEmitter": any;
        "dataEmitterRequest": any;
        "defaultSearchObject": Array<any>;
        "externalPayload": any;
        "externalSearchFilter": Array<any>;
        "filterObject": Array<any>;
        "fitGrid": string;
        "fullViewData": any;
        "gridBarTitle": string;
        "gridId": string;
        "gridState": any[];
        "hotListIdentifier": string;
        "kpiValues": Array<any>;
        "menuItems": Array<any>;
        "noResults": boolean;
        "productId": number;
        "queryId": string;
        "renderConfigs": Array<{ field: string, rendererName: string, otherField: string, callbackId: string }>;
        "rowData": any[];
        "searchKey": Object;
        "showAdvancedSearchFeature": boolean;
        "showFilterColumnFeature": boolean;
        "tenantId": string;
        "updateFilterAndFetch": (newFilter: Array<any>) => Promise<void>;
        "userId": string;
        "viewActionClickHandler": (value: any, callback: any) => void;
        "viewChips": Array<any>;
        "viewListrowData": any[];
    }
    interface AppBar {
        "username": string;
    }
    interface ChipSection {
        "additionalFilterChips": Array<any>;
        "filterChips": Array<any>;
        "handleDelete": Function;
        "hideKpiSection": boolean;
        "kpiValues": Array<any>;
        "maxKPIsDisplayed": number;
        "menuItems": Array<any>;
        "viewChips": Array<any>;
    }
    interface CustomButton {
        "disabled": boolean;
        "label": string;
        "secondary": boolean;
        "size": 'default' | 'short' | 'tall';
        "type": 'button' | 'submit' | 'reset';
        "variant": 'default' | 'outline';
    }
    interface FilterConditions {
    }
    interface FluentDialog {
        "actionOne": Function;
        "actionTwo": Function;
        "ariaDescribedby": string;
        "ariaLabelledby": string;
        "buttonOneHidden": boolean;
        "buttonTwoHidden": boolean;
        "descriptionId": string;
        "disableOne": boolean;
        "disableTwo": boolean;
        "handleClose": Function;
        "labelOne": string;
        "labelTwo": string;
        "message": string;
        "open": boolean;
        "progress": number;
        "title": string;
        "titleId": string;
    }
    interface GetUser {
        "accessToken": string;
    }
    interface GridPrimaryBar {
        "actionButtons": any[];
        "customAdvancedSearchClick"?: (event?: MouseEvent) => void;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowCustomSearchClick"?: (event?: MouseEvent) => void;
        "customShowHotlistClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "customToggleServerClientClick"?: (event?: MouseEvent) => void;
        "hiddenActionButtons": string[];
        "hiddenLabels": string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "showAdvancedSearchFeature": boolean;
        "showFilterColumnFeature": boolean;
        "title": string;
    }
    interface HintPanel {
        "hideHintText": string;
        "hint": string;
    }
    interface KpiList {
        "kpiValues": Array<{ label: string, value: number }>;
    }
    interface LogicalSearchIndicator {
        "type": number;
    }
    interface MyComponent {
        "accessTokenProp": string;
        "first": string;
        "last": string;
        "middle": string;
    }
    interface PrimaryActionHeader {
        "actionButtonLabel": string;
        "actionButtons": any[];
        "activeTabIndex": number;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "defaultActionButtons": any[];
        "hiddenActionButtons": string[];
        "hiddenLabels": string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "selectTab": (index: number) => void;
        "tabs": boolean;
        "title": string;
    }
    interface SaveViewFormDialog {
        "apiCatalogId": any;
        "application": string;
        "closeDialog": any;
        "domain": any;
        "entity": string;
        "gApi": any;
        "gcApi": any;
        "gridId": any;
        "handleClose": Function;
        "handleFormSubmit": (name: string, isPrivate: boolean) => void;
        "open": boolean;
        "refetchViews": () => void;
        "tenant": string;
        "user": any;
    }
    interface SearchListItem {
        "groupId": string;
        "handleDelete": (event: MouseEvent) => void;
        "label": string;
        "name": string;
    }
    interface SideSheet {
        "buttonLabel": string;
        "disabled": boolean;
        "handleSideSheetButton": () => void;
        "open": boolean;
        "position": 'left' | 'right';
        "sideSheetButtonLabel": string;
        "title": string;
        "toggleDrawer": () => void;
        "widthOption": 'short' | 'long' | number;
    }
    interface SideSheetContainer {
    }
    interface StatusChip {
        "statusClasses": { [key: string]: string };
        "statusValue": string | boolean;
    }
    interface StencilChip {
        "color": 'primary' | 'secondary';
        "defaultToggled": boolean;
        "externalToggleString": string;
        "leftIcon": any;
        "level": number;
        "showDelete": boolean;
        "showLeftIcon": boolean;
        "text": string;
    }
    interface StencilIconButton {
        "darkIcon": boolean;
        "icon": any;
        "iconClassName": string;
        "iconName": string;
        "noBackground": boolean;
        "onClick": (event: MouseEvent) => void;
        "secondary": boolean;
        "showLabel": boolean;
        "tooltip": string;
    }
    interface StencilToggle {
        "checked": boolean;
        "disabled": boolean;
        "idItem": string;
        "label": string;
    }
    interface TestApi {
    }
    interface TestApiUpdated {
    }
    interface TextField {
        "label": string;
        "onBlur": (event: Event) => void;
        "onInput": (event: Event) => void;
        "placeholder": string;
        "value": string;
    }
    interface ToggleButton {
        "onToggle": () => void;
        "toggled": boolean;
    }
    interface TreeListItem {
        "customAttribute": string;
        "dataOne": string;
        "dataTwo": string;
        "deleteHandler": (event: MouseEvent) => void;
        "label": string;
        "level": number;
        "nestedItems"?: any[];
        "parent": string;
        "parentFilter": any;
        "parentName": string;
        "parentPath": string;
        "reference": string | null;
        "showAdd": boolean;
        "showDeleteOption": boolean;
        "showViewOption": boolean;
        "statusClasses": { [key: string]: string };
        "statusKey": string;
        "statusLabel": string;
        "statusValue": boolean;
        "test": string;
        "viewHandler": (event: MouseEvent) => void;
    }
    interface UdpAmbientToolTip {
        "content": string;
    }
    interface UdpAvatar {
        "username": string;
    }
    interface UdpBadge {
        "content": number;
        "max": number;
    }
    interface UdpColumnHeader {
    }
    interface UdpDivider {
        "size": string;
        "variant": 'horizontal' | 'vertical';
    }
    interface UdpDynamicContainerWithMenu {
        "calculateChildren": () => Promise<void>;
        "externalToggle": string;
        "menuItems": any[];
    }
    interface UdpDynamicForm {
        "getFormData": () => Promise<{ searchField: string; searchOperator: any; searchValue: any; groupId: number; }[]>;
    }
    interface UdpFetch {
        "accessToken": string;
        "isServerSide": boolean;
        "promotedEntity": any;
        "tenantId": string;
    }
    interface UdpFunctionButton {
        "delete": boolean;
        "expand": boolean;
        "view": boolean;
    }
    interface UdpGridLoader {
        "numColumns": number;
        "numRows": number;
        "width": string;
    }
    interface UdpHotlistForm {
        "handleCancelClick": () => void;
        "handleFormSubmit": (name: string, isPrivate: boolean, columnState: any) => void;
        "refetchViews": () => void;
    }
    interface UdpLinearLoader {
    }
    interface UdpMenuItem {
        "label": string;
    }
    interface UdpNotification {
        "active": boolean;
        "message": string;
        "status": 'success' | 'error' | 'warning';
        "userCancel": boolean;
    }
    interface UdpPageHeader {
    }
    interface UdpPopOver {
        "anchorElement": HTMLElement;
        "isOpen": boolean;
    }
    interface UdpRadioButton {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "name": string;
        "value": string;
    }
    interface UdpSelector {
        "defaultOption": string;
        "fieldName": string;
        "label": string;
        "large": boolean;
        "options": Array<{ value: string; label: string }>;
    }
    interface UdpSkeletonLoading {
        "borderRadius": string;
        "height": string;
        "width": string;
    }
    interface UdpTab {
        "active": boolean;
        "title": string;
    }
    interface UdpTabs {
    }
    interface UdpUserCreator {
        "createUser": (userInfo: any) => Promise<User>;
    }
    interface UnityTypography {
        "variant": TypographyVariant;
    }
    interface UpdAlertBanner {
        "message": string;
        "onClick": () => void;
        "type": 'info' | 'warning' | 'error' | 'success';
    }
}
export interface AdvancedSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAdvancedSearchElement;
}
export interface AdvancedSearchGroupedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAdvancedSearchGroupedElement;
}
export interface AgGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAgGridElement;
}
export interface AmbientTemplateGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmbientTemplateGridElement;
}
export interface CustomButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomButtonElement;
}
export interface GetUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGetUserElement;
}
export interface SearchListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchListItemElement;
}
export interface StencilChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStencilChipElement;
}
export interface StencilToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStencilToggleElement;
}
export interface TreeListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTreeListItemElement;
}
export interface UdpDynamicContainerWithMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpDynamicContainerWithMenuElement;
}
export interface UdpFetchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpFetchElement;
}
export interface UdpMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpMenuItemElement;
}
export interface UdpPageHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpPageHeaderElement;
}
export interface UdpSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUdpSelectorElement;
}
declare global {
    interface HTMLAdvancedSearchElementEventMap {
        "advancedSearchItemChange": any;
    }
    interface HTMLAdvancedSearchElement extends Components.AdvancedSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAdvancedSearchElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchElement, ev: AdvancedSearchCustomEvent<HTMLAdvancedSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAdvancedSearchElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchElement, ev: AdvancedSearchCustomEvent<HTMLAdvancedSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAdvancedSearchElement: {
        prototype: HTMLAdvancedSearchElement;
        new (): HTMLAdvancedSearchElement;
    };
    interface HTMLAdvancedSearchGroupedElementEventMap {
        "advancedSearchItemChange": any;
        "searchItemChanged": any;
    }
    interface HTMLAdvancedSearchGroupedElement extends Components.AdvancedSearchGrouped, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAdvancedSearchGroupedElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchGroupedElement, ev: AdvancedSearchGroupedCustomEvent<HTMLAdvancedSearchGroupedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAdvancedSearchGroupedElementEventMap>(type: K, listener: (this: HTMLAdvancedSearchGroupedElement, ev: AdvancedSearchGroupedCustomEvent<HTMLAdvancedSearchGroupedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAdvancedSearchGroupedElement: {
        prototype: HTMLAdvancedSearchGroupedElement;
        new (): HTMLAdvancedSearchGroupedElement;
    };
    interface HTMLAgGridElementEventMap {
        "viewSaved": any;
    }
    interface HTMLAgGridElement extends Components.AgGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAgGridElementEventMap>(type: K, listener: (this: HTMLAgGridElement, ev: AgGridCustomEvent<HTMLAgGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAgGridElementEventMap>(type: K, listener: (this: HTMLAgGridElement, ev: AgGridCustomEvent<HTMLAgGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAgGridElement: {
        prototype: HTMLAgGridElement;
        new (): HTMLAgGridElement;
    };
    interface HTMLAgTableElement extends Components.AgTable, HTMLStencilElement {
    }
    var HTMLAgTableElement: {
        prototype: HTMLAgTableElement;
        new (): HTMLAgTableElement;
    };
    interface HTMLAmbientDemoContainerElement extends Components.AmbientDemoContainer, HTMLStencilElement {
    }
    var HTMLAmbientDemoContainerElement: {
        prototype: HTMLAmbientDemoContainerElement;
        new (): HTMLAmbientDemoContainerElement;
    };
    interface HTMLAmbientTemplateGridElementEventMap {
        "viewSaved": any;
        "externalEmitter": any;
        "selectedIdsChanged": number[];
    }
    interface HTMLAmbientTemplateGridElement extends Components.AmbientTemplateGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmbientTemplateGridElementEventMap>(type: K, listener: (this: HTMLAmbientTemplateGridElement, ev: AmbientTemplateGridCustomEvent<HTMLAmbientTemplateGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmbientTemplateGridElementEventMap>(type: K, listener: (this: HTMLAmbientTemplateGridElement, ev: AmbientTemplateGridCustomEvent<HTMLAmbientTemplateGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmbientTemplateGridElement: {
        prototype: HTMLAmbientTemplateGridElement;
        new (): HTMLAmbientTemplateGridElement;
    };
    interface HTMLAppBarElement extends Components.AppBar, HTMLStencilElement {
    }
    var HTMLAppBarElement: {
        prototype: HTMLAppBarElement;
        new (): HTMLAppBarElement;
    };
    interface HTMLChipSectionElement extends Components.ChipSection, HTMLStencilElement {
    }
    var HTMLChipSectionElement: {
        prototype: HTMLChipSectionElement;
        new (): HTMLChipSectionElement;
    };
    interface HTMLCustomButtonElementEventMap {
        "customClick": void;
    }
    interface HTMLCustomButtonElement extends Components.CustomButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomButtonElementEventMap>(type: K, listener: (this: HTMLCustomButtonElement, ev: CustomButtonCustomEvent<HTMLCustomButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomButtonElementEventMap>(type: K, listener: (this: HTMLCustomButtonElement, ev: CustomButtonCustomEvent<HTMLCustomButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomButtonElement: {
        prototype: HTMLCustomButtonElement;
        new (): HTMLCustomButtonElement;
    };
    interface HTMLFilterConditionsElement extends Components.FilterConditions, HTMLStencilElement {
    }
    var HTMLFilterConditionsElement: {
        prototype: HTMLFilterConditionsElement;
        new (): HTMLFilterConditionsElement;
    };
    interface HTMLFluentDialogElement extends Components.FluentDialog, HTMLStencilElement {
    }
    var HTMLFluentDialogElement: {
        prototype: HTMLFluentDialogElement;
        new (): HTMLFluentDialogElement;
    };
    interface HTMLGetUserElementEventMap {
        "userDataReady": any;
    }
    interface HTMLGetUserElement extends Components.GetUser, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGetUserElementEventMap>(type: K, listener: (this: HTMLGetUserElement, ev: GetUserCustomEvent<HTMLGetUserElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGetUserElementEventMap>(type: K, listener: (this: HTMLGetUserElement, ev: GetUserCustomEvent<HTMLGetUserElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGetUserElement: {
        prototype: HTMLGetUserElement;
        new (): HTMLGetUserElement;
    };
    interface HTMLGridPrimaryBarElement extends Components.GridPrimaryBar, HTMLStencilElement {
    }
    var HTMLGridPrimaryBarElement: {
        prototype: HTMLGridPrimaryBarElement;
        new (): HTMLGridPrimaryBarElement;
    };
    interface HTMLHintPanelElement extends Components.HintPanel, HTMLStencilElement {
    }
    var HTMLHintPanelElement: {
        prototype: HTMLHintPanelElement;
        new (): HTMLHintPanelElement;
    };
    interface HTMLKpiListElement extends Components.KpiList, HTMLStencilElement {
    }
    var HTMLKpiListElement: {
        prototype: HTMLKpiListElement;
        new (): HTMLKpiListElement;
    };
    interface HTMLLogicalSearchIndicatorElement extends Components.LogicalSearchIndicator, HTMLStencilElement {
    }
    var HTMLLogicalSearchIndicatorElement: {
        prototype: HTMLLogicalSearchIndicatorElement;
        new (): HTMLLogicalSearchIndicatorElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPrimaryActionHeaderElement extends Components.PrimaryActionHeader, HTMLStencilElement {
    }
    var HTMLPrimaryActionHeaderElement: {
        prototype: HTMLPrimaryActionHeaderElement;
        new (): HTMLPrimaryActionHeaderElement;
    };
    interface HTMLSaveViewFormDialogElement extends Components.SaveViewFormDialog, HTMLStencilElement {
    }
    var HTMLSaveViewFormDialogElement: {
        prototype: HTMLSaveViewFormDialogElement;
        new (): HTMLSaveViewFormDialogElement;
    };
    interface HTMLSearchListItemElementEventMap {
        "searchItemChanged": any;
    }
    interface HTMLSearchListItemElement extends Components.SearchListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchListItemElementEventMap>(type: K, listener: (this: HTMLSearchListItemElement, ev: SearchListItemCustomEvent<HTMLSearchListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchListItemElementEventMap>(type: K, listener: (this: HTMLSearchListItemElement, ev: SearchListItemCustomEvent<HTMLSearchListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchListItemElement: {
        prototype: HTMLSearchListItemElement;
        new (): HTMLSearchListItemElement;
    };
    interface HTMLSideSheetElement extends Components.SideSheet, HTMLStencilElement {
    }
    var HTMLSideSheetElement: {
        prototype: HTMLSideSheetElement;
        new (): HTMLSideSheetElement;
    };
    interface HTMLSideSheetContainerElement extends Components.SideSheetContainer, HTMLStencilElement {
    }
    var HTMLSideSheetContainerElement: {
        prototype: HTMLSideSheetContainerElement;
        new (): HTMLSideSheetContainerElement;
    };
    interface HTMLStatusChipElement extends Components.StatusChip, HTMLStencilElement {
    }
    var HTMLStatusChipElement: {
        prototype: HTMLStatusChipElement;
        new (): HTMLStatusChipElement;
    };
    interface HTMLStencilChipElementEventMap {
        "onDelete": void;
        "onToggle": boolean;
        "udpChipClicked": string;
    }
    interface HTMLStencilChipElement extends Components.StencilChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStencilChipElementEventMap>(type: K, listener: (this: HTMLStencilChipElement, ev: StencilChipCustomEvent<HTMLStencilChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStencilChipElementEventMap>(type: K, listener: (this: HTMLStencilChipElement, ev: StencilChipCustomEvent<HTMLStencilChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStencilChipElement: {
        prototype: HTMLStencilChipElement;
        new (): HTMLStencilChipElement;
    };
    interface HTMLStencilIconButtonElement extends Components.StencilIconButton, HTMLStencilElement {
    }
    var HTMLStencilIconButtonElement: {
        prototype: HTMLStencilIconButtonElement;
        new (): HTMLStencilIconButtonElement;
    };
    interface HTMLStencilToggleElementEventMap {
        "toggledChange": any;
    }
    interface HTMLStencilToggleElement extends Components.StencilToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLStencilToggleElementEventMap>(type: K, listener: (this: HTMLStencilToggleElement, ev: StencilToggleCustomEvent<HTMLStencilToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLStencilToggleElementEventMap>(type: K, listener: (this: HTMLStencilToggleElement, ev: StencilToggleCustomEvent<HTMLStencilToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLStencilToggleElement: {
        prototype: HTMLStencilToggleElement;
        new (): HTMLStencilToggleElement;
    };
    interface HTMLTestApiElement extends Components.TestApi, HTMLStencilElement {
    }
    var HTMLTestApiElement: {
        prototype: HTMLTestApiElement;
        new (): HTMLTestApiElement;
    };
    interface HTMLTestApiUpdatedElement extends Components.TestApiUpdated, HTMLStencilElement {
    }
    var HTMLTestApiUpdatedElement: {
        prototype: HTMLTestApiUpdatedElement;
        new (): HTMLTestApiUpdatedElement;
    };
    interface HTMLTextFieldElement extends Components.TextField, HTMLStencilElement {
    }
    var HTMLTextFieldElement: {
        prototype: HTMLTextFieldElement;
        new (): HTMLTextFieldElement;
    };
    interface HTMLToggleButtonElement extends Components.ToggleButton, HTMLStencilElement {
    }
    var HTMLToggleButtonElement: {
        prototype: HTMLToggleButtonElement;
        new (): HTMLToggleButtonElement;
    };
    interface HTMLTreeListItemElementEventMap {
        "itemClick": { searchField: string, searchOperator: string, searchValue: string, parentName?: string, parentPath?: string, uniqueFieldId?: string };
        "reference-clicked": { reference: string, name: string, parentReference?: string, parentFilter?: string, parent?: string, parentPath?: string };
    }
    interface HTMLTreeListItemElement extends Components.TreeListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTreeListItemElementEventMap>(type: K, listener: (this: HTMLTreeListItemElement, ev: TreeListItemCustomEvent<HTMLTreeListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTreeListItemElementEventMap>(type: K, listener: (this: HTMLTreeListItemElement, ev: TreeListItemCustomEvent<HTMLTreeListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTreeListItemElement: {
        prototype: HTMLTreeListItemElement;
        new (): HTMLTreeListItemElement;
    };
    interface HTMLUdpAmbientToolTipElement extends Components.UdpAmbientToolTip, HTMLStencilElement {
    }
    var HTMLUdpAmbientToolTipElement: {
        prototype: HTMLUdpAmbientToolTipElement;
        new (): HTMLUdpAmbientToolTipElement;
    };
    interface HTMLUdpAvatarElement extends Components.UdpAvatar, HTMLStencilElement {
    }
    var HTMLUdpAvatarElement: {
        prototype: HTMLUdpAvatarElement;
        new (): HTMLUdpAvatarElement;
    };
    interface HTMLUdpBadgeElement extends Components.UdpBadge, HTMLStencilElement {
    }
    var HTMLUdpBadgeElement: {
        prototype: HTMLUdpBadgeElement;
        new (): HTMLUdpBadgeElement;
    };
    interface HTMLUdpColumnHeaderElement extends Components.UdpColumnHeader, HTMLStencilElement {
    }
    var HTMLUdpColumnHeaderElement: {
        prototype: HTMLUdpColumnHeaderElement;
        new (): HTMLUdpColumnHeaderElement;
    };
    interface HTMLUdpDividerElement extends Components.UdpDivider, HTMLStencilElement {
    }
    var HTMLUdpDividerElement: {
        prototype: HTMLUdpDividerElement;
        new (): HTMLUdpDividerElement;
    };
    interface HTMLUdpDynamicContainerWithMenuElementEventMap {
        "udpChipClicked": string;
    }
    interface HTMLUdpDynamicContainerWithMenuElement extends Components.UdpDynamicContainerWithMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpDynamicContainerWithMenuElementEventMap>(type: K, listener: (this: HTMLUdpDynamicContainerWithMenuElement, ev: UdpDynamicContainerWithMenuCustomEvent<HTMLUdpDynamicContainerWithMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpDynamicContainerWithMenuElementEventMap>(type: K, listener: (this: HTMLUdpDynamicContainerWithMenuElement, ev: UdpDynamicContainerWithMenuCustomEvent<HTMLUdpDynamicContainerWithMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpDynamicContainerWithMenuElement: {
        prototype: HTMLUdpDynamicContainerWithMenuElement;
        new (): HTMLUdpDynamicContainerWithMenuElement;
    };
    interface HTMLUdpDynamicFormElement extends Components.UdpDynamicForm, HTMLStencilElement {
    }
    var HTMLUdpDynamicFormElement: {
        prototype: HTMLUdpDynamicFormElement;
        new (): HTMLUdpDynamicFormElement;
    };
    interface HTMLUdpFetchElementEventMap {
        "dataFetched": any;
    }
    interface HTMLUdpFetchElement extends Components.UdpFetch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpFetchElementEventMap>(type: K, listener: (this: HTMLUdpFetchElement, ev: UdpFetchCustomEvent<HTMLUdpFetchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpFetchElementEventMap>(type: K, listener: (this: HTMLUdpFetchElement, ev: UdpFetchCustomEvent<HTMLUdpFetchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpFetchElement: {
        prototype: HTMLUdpFetchElement;
        new (): HTMLUdpFetchElement;
    };
    interface HTMLUdpFunctionButtonElement extends Components.UdpFunctionButton, HTMLStencilElement {
    }
    var HTMLUdpFunctionButtonElement: {
        prototype: HTMLUdpFunctionButtonElement;
        new (): HTMLUdpFunctionButtonElement;
    };
    interface HTMLUdpGridLoaderElement extends Components.UdpGridLoader, HTMLStencilElement {
    }
    var HTMLUdpGridLoaderElement: {
        prototype: HTMLUdpGridLoaderElement;
        new (): HTMLUdpGridLoaderElement;
    };
    interface HTMLUdpHotlistFormElement extends Components.UdpHotlistForm, HTMLStencilElement {
    }
    var HTMLUdpHotlistFormElement: {
        prototype: HTMLUdpHotlistFormElement;
        new (): HTMLUdpHotlistFormElement;
    };
    interface HTMLUdpLinearLoaderElement extends Components.UdpLinearLoader, HTMLStencilElement {
    }
    var HTMLUdpLinearLoaderElement: {
        prototype: HTMLUdpLinearLoaderElement;
        new (): HTMLUdpLinearLoaderElement;
    };
    interface HTMLUdpMenuItemElementEventMap {
        "itemClick": any;
    }
    interface HTMLUdpMenuItemElement extends Components.UdpMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpMenuItemElementEventMap>(type: K, listener: (this: HTMLUdpMenuItemElement, ev: UdpMenuItemCustomEvent<HTMLUdpMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpMenuItemElementEventMap>(type: K, listener: (this: HTMLUdpMenuItemElement, ev: UdpMenuItemCustomEvent<HTMLUdpMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpMenuItemElement: {
        prototype: HTMLUdpMenuItemElement;
        new (): HTMLUdpMenuItemElement;
    };
    interface HTMLUdpNotificationElement extends Components.UdpNotification, HTMLStencilElement {
    }
    var HTMLUdpNotificationElement: {
        prototype: HTMLUdpNotificationElement;
        new (): HTMLUdpNotificationElement;
    };
    interface HTMLUdpPageHeaderElementEventMap {
        "valueChanged": any;
    }
    interface HTMLUdpPageHeaderElement extends Components.UdpPageHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpPageHeaderElementEventMap>(type: K, listener: (this: HTMLUdpPageHeaderElement, ev: UdpPageHeaderCustomEvent<HTMLUdpPageHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpPageHeaderElementEventMap>(type: K, listener: (this: HTMLUdpPageHeaderElement, ev: UdpPageHeaderCustomEvent<HTMLUdpPageHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpPageHeaderElement: {
        prototype: HTMLUdpPageHeaderElement;
        new (): HTMLUdpPageHeaderElement;
    };
    interface HTMLUdpPopOverElement extends Components.UdpPopOver, HTMLStencilElement {
    }
    var HTMLUdpPopOverElement: {
        prototype: HTMLUdpPopOverElement;
        new (): HTMLUdpPopOverElement;
    };
    interface HTMLUdpRadioButtonElement extends Components.UdpRadioButton, HTMLStencilElement {
    }
    var HTMLUdpRadioButtonElement: {
        prototype: HTMLUdpRadioButtonElement;
        new (): HTMLUdpRadioButtonElement;
    };
    interface HTMLUdpSelectorElementEventMap {
        "optionSelected": any;
    }
    interface HTMLUdpSelectorElement extends Components.UdpSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUdpSelectorElementEventMap>(type: K, listener: (this: HTMLUdpSelectorElement, ev: UdpSelectorCustomEvent<HTMLUdpSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUdpSelectorElementEventMap>(type: K, listener: (this: HTMLUdpSelectorElement, ev: UdpSelectorCustomEvent<HTMLUdpSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUdpSelectorElement: {
        prototype: HTMLUdpSelectorElement;
        new (): HTMLUdpSelectorElement;
    };
    interface HTMLUdpSkeletonLoadingElement extends Components.UdpSkeletonLoading, HTMLStencilElement {
    }
    var HTMLUdpSkeletonLoadingElement: {
        prototype: HTMLUdpSkeletonLoadingElement;
        new (): HTMLUdpSkeletonLoadingElement;
    };
    interface HTMLUdpTabElement extends Components.UdpTab, HTMLStencilElement {
    }
    var HTMLUdpTabElement: {
        prototype: HTMLUdpTabElement;
        new (): HTMLUdpTabElement;
    };
    interface HTMLUdpTabsElement extends Components.UdpTabs, HTMLStencilElement {
    }
    var HTMLUdpTabsElement: {
        prototype: HTMLUdpTabsElement;
        new (): HTMLUdpTabsElement;
    };
    interface HTMLUdpUserCreatorElement extends Components.UdpUserCreator, HTMLStencilElement {
    }
    var HTMLUdpUserCreatorElement: {
        prototype: HTMLUdpUserCreatorElement;
        new (): HTMLUdpUserCreatorElement;
    };
    interface HTMLUnityTypographyElement extends Components.UnityTypography, HTMLStencilElement {
    }
    var HTMLUnityTypographyElement: {
        prototype: HTMLUnityTypographyElement;
        new (): HTMLUnityTypographyElement;
    };
    interface HTMLUpdAlertBannerElement extends Components.UpdAlertBanner, HTMLStencilElement {
    }
    var HTMLUpdAlertBannerElement: {
        prototype: HTMLUpdAlertBannerElement;
        new (): HTMLUpdAlertBannerElement;
    };
    interface HTMLElementTagNameMap {
        "advanced-search": HTMLAdvancedSearchElement;
        "advanced-search-grouped": HTMLAdvancedSearchGroupedElement;
        "ag-grid": HTMLAgGridElement;
        "ag-table": HTMLAgTableElement;
        "ambient-demo-container": HTMLAmbientDemoContainerElement;
        "ambient-template-grid": HTMLAmbientTemplateGridElement;
        "app-bar": HTMLAppBarElement;
        "chip-section": HTMLChipSectionElement;
        "custom-button": HTMLCustomButtonElement;
        "filter-conditions": HTMLFilterConditionsElement;
        "fluent-dialog": HTMLFluentDialogElement;
        "get-user": HTMLGetUserElement;
        "grid-primary-bar": HTMLGridPrimaryBarElement;
        "hint-panel": HTMLHintPanelElement;
        "kpi-list": HTMLKpiListElement;
        "logical-search-indicator": HTMLLogicalSearchIndicatorElement;
        "my-component": HTMLMyComponentElement;
        "primary-action-header": HTMLPrimaryActionHeaderElement;
        "save-view-form-dialog": HTMLSaveViewFormDialogElement;
        "search-list-item": HTMLSearchListItemElement;
        "side-sheet": HTMLSideSheetElement;
        "side-sheet-container": HTMLSideSheetContainerElement;
        "status-chip": HTMLStatusChipElement;
        "stencil-chip": HTMLStencilChipElement;
        "stencil-icon-button": HTMLStencilIconButtonElement;
        "stencil-toggle": HTMLStencilToggleElement;
        "test-api": HTMLTestApiElement;
        "test-api-updated": HTMLTestApiUpdatedElement;
        "text-field": HTMLTextFieldElement;
        "toggle-button": HTMLToggleButtonElement;
        "tree-list-item": HTMLTreeListItemElement;
        "udp-ambient-tool-tip": HTMLUdpAmbientToolTipElement;
        "udp-avatar": HTMLUdpAvatarElement;
        "udp-badge": HTMLUdpBadgeElement;
        "udp-column-header": HTMLUdpColumnHeaderElement;
        "udp-divider": HTMLUdpDividerElement;
        "udp-dynamic-container-with-menu": HTMLUdpDynamicContainerWithMenuElement;
        "udp-dynamic-form": HTMLUdpDynamicFormElement;
        "udp-fetch": HTMLUdpFetchElement;
        "udp-function-button": HTMLUdpFunctionButtonElement;
        "udp-grid-loader": HTMLUdpGridLoaderElement;
        "udp-hotlist-form": HTMLUdpHotlistFormElement;
        "udp-linear-loader": HTMLUdpLinearLoaderElement;
        "udp-menu-item": HTMLUdpMenuItemElement;
        "udp-notification": HTMLUdpNotificationElement;
        "udp-page-header": HTMLUdpPageHeaderElement;
        "udp-pop-over": HTMLUdpPopOverElement;
        "udp-radio-button": HTMLUdpRadioButtonElement;
        "udp-selector": HTMLUdpSelectorElement;
        "udp-skeleton-loading": HTMLUdpSkeletonLoadingElement;
        "udp-tab": HTMLUdpTabElement;
        "udp-tabs": HTMLUdpTabsElement;
        "udp-user-creator": HTMLUdpUserCreatorElement;
        "unity-typography": HTMLUnityTypographyElement;
        "upd-alert-banner": HTMLUpdAlertBannerElement;
    }
}
declare namespace LocalJSX {
    interface AdvancedSearch {
        "fetchFilters"?: Function;
        "filterList"?: any[];
        "filterRenderList"?: any[];
        "handleDelete"?: (arg0: object) => void;
        "handleItemClick"?: (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged"?: (event: CustomEvent) => void;
        "onAdvancedSearchItemChange"?: (event: AdvancedSearchCustomEvent<any>) => void;
    }
    interface AdvancedSearchGrouped {
        "fetchFilters"?: Function;
        "filterList"?: any[];
        "filterObjectsWithGroups"?: FilterGroup[];
        "filterRenderList"?: any[];
        "handleAddNewFilter"?: (groupId: string, otherId: string) => void;
        "handleAddNewGroup"?: (groupId: string, logicalOperator: 'AND' | 'OR') => void;
        "handleDelete"?: (arg0: object) => void;
        "handleGroupItemDelete"?: (filterGroupId: string) => void;
        "handleItemClick"?: (item: { searchField: string, searchOperator: string, searchValue: string }) => void;
        "handleValueChanged"?: (event: CustomEvent) => void;
        "onAdvancedSearchItemChange"?: (event: AdvancedSearchGroupedCustomEvent<any>) => void;
        "onSearchItemChanged"?: (event: AdvancedSearchGroupedCustomEvent<any>) => void;
        "searchData"?: any;
        "updateLogicalOperator"?: (groupId: string, logicalOperator: 'AND' | 'OR') => void;
    }
    interface AgGrid {
        "columnDefs"?: any[];
        "gridId"?: string;
        "gridState"?: any[];
        "handleFormSubmit"?: (name: string, isPrivate: boolean, columnState: any[]) => void;
        "onViewSaved"?: (event: AgGridCustomEvent<any>) => void;
        "rowData"?: any[];
    }
    interface AgTable {
        "gridOptions"?: GridOptions;
        "height"?: string;
        "licensekey"?: string;
    }
    interface AmbientDemoContainer {
        "title"?: string;
    }
    interface AmbientTemplateGrid {
        "accessToken"?: string;
        "actionId"?: string;
        "additionalFilterChips"?: Array<any>;
        "apiCatalogId"?: string;
        "apiMethodId"?: string;
        "cellClickHandler"?: (value: any, callback: any) => void;
        "cellClickHandlerX"?: (value: any, callback: any) => void;
        "columnDefs"?: any[];
        "dataEmitter"?: any;
        "dataEmitterRequest"?: any;
        "defaultSearchObject"?: Array<any>;
        "externalPayload"?: any;
        "externalSearchFilter"?: Array<any>;
        "filterObject"?: Array<any>;
        "fitGrid"?: string;
        "fullViewData"?: any;
        "gridBarTitle"?: string;
        "gridId"?: string;
        "gridState"?: any[];
        "hotListIdentifier"?: string;
        "kpiValues"?: Array<any>;
        "menuItems"?: Array<any>;
        "noResults"?: boolean;
        "onExternalEmitter"?: (event: AmbientTemplateGridCustomEvent<any>) => void;
        "onSelectedIdsChanged"?: (event: AmbientTemplateGridCustomEvent<number[]>) => void;
        "onViewSaved"?: (event: AmbientTemplateGridCustomEvent<any>) => void;
        "productId"?: number;
        "queryId"?: string;
        "renderConfigs"?: Array<{ field: string, rendererName: string, otherField: string, callbackId: string }>;
        "rowData"?: any[];
        "searchKey"?: Object;
        "showAdvancedSearchFeature"?: boolean;
        "showFilterColumnFeature"?: boolean;
        "tenantId"?: string;
        "userId"?: string;
        "viewActionClickHandler"?: (value: any, callback: any) => void;
        "viewChips"?: Array<any>;
        "viewListrowData"?: any[];
    }
    interface AppBar {
        "username"?: string;
    }
    interface ChipSection {
        "additionalFilterChips"?: Array<any>;
        "filterChips"?: Array<any>;
        "handleDelete"?: Function;
        "hideKpiSection"?: boolean;
        "kpiValues"?: Array<any>;
        "maxKPIsDisplayed"?: number;
        "menuItems"?: Array<any>;
        "viewChips"?: Array<any>;
    }
    interface CustomButton {
        "disabled"?: boolean;
        "label"?: string;
        "onCustomClick"?: (event: CustomButtonCustomEvent<void>) => void;
        "secondary"?: boolean;
        "size"?: 'default' | 'short' | 'tall';
        "type"?: 'button' | 'submit' | 'reset';
        "variant"?: 'default' | 'outline';
    }
    interface FilterConditions {
    }
    interface FluentDialog {
        "actionOne"?: Function;
        "actionTwo"?: Function;
        "ariaDescribedby"?: string;
        "ariaLabelledby"?: string;
        "buttonOneHidden"?: boolean;
        "buttonTwoHidden"?: boolean;
        "descriptionId"?: string;
        "disableOne"?: boolean;
        "disableTwo"?: boolean;
        "handleClose"?: Function;
        "labelOne"?: string;
        "labelTwo"?: string;
        "message"?: string;
        "open"?: boolean;
        "progress"?: number;
        "title"?: string;
        "titleId"?: string;
    }
    interface GetUser {
        "accessToken"?: string;
        "onUserDataReady"?: (event: GetUserCustomEvent<any>) => void;
    }
    interface GridPrimaryBar {
        "actionButtons"?: any[];
        "customAdvancedSearchClick"?: (event?: MouseEvent) => void;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowCustomSearchClick"?: (event?: MouseEvent) => void;
        "customShowHotlistClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "customToggleServerClientClick"?: (event?: MouseEvent) => void;
        "hiddenActionButtons"?: string[];
        "hiddenLabels"?: string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "showAdvancedSearchFeature"?: boolean;
        "showFilterColumnFeature"?: boolean;
        "title"?: string;
    }
    interface HintPanel {
        "hideHintText"?: string;
        "hint"?: string;
    }
    interface KpiList {
        "kpiValues"?: Array<{ label: string, value: number }>;
    }
    interface LogicalSearchIndicator {
        "type"?: number;
    }
    interface MyComponent {
        "accessTokenProp"?: string;
        "first"?: string;
        "last"?: string;
        "middle"?: string;
    }
    interface PrimaryActionHeader {
        "actionButtonLabel"?: string;
        "actionButtons"?: any[];
        "activeTabIndex"?: number;
        "customClearClick"?: (event?: MouseEvent) => void;
        "customColumnViewClick"?: (event?: MouseEvent) => void;
        "customExpandClick"?: (event?: MouseEvent) => void;
        "customExportClick"?: (event?: MouseEvent) => void;
        "customFilterViewClick"?: (event?: MouseEvent) => void;
        "customFitColumnClick"?: (event?: MouseEvent) => void;
        "customSaveViewClick"?: (event?: MouseEvent) => void;
        "customShowViewClick"?: (event?: MouseEvent) => void;
        "customSizeToFitClick"?: (event?: MouseEvent) => void;
        "defaultActionButtons"?: any[];
        "hiddenActionButtons"?: string[];
        "hiddenLabels"?: string[];
        "primaryActionClick"?: (event?: MouseEvent) => void;
        "selectTab"?: (index: number) => void;
        "tabs"?: boolean;
        "title"?: string;
    }
    interface SaveViewFormDialog {
        "apiCatalogId"?: any;
        "application"?: string;
        "closeDialog"?: any;
        "domain"?: any;
        "entity"?: string;
        "gApi"?: any;
        "gcApi"?: any;
        "gridId"?: any;
        "handleClose"?: Function;
        "handleFormSubmit"?: (name: string, isPrivate: boolean) => void;
        "open"?: boolean;
        "refetchViews"?: () => void;
        "tenant"?: string;
        "user"?: any;
    }
    interface SearchListItem {
        "groupId"?: string;
        "handleDelete"?: (event: MouseEvent) => void;
        "label"?: string;
        "name"?: string;
        "onSearchItemChanged"?: (event: SearchListItemCustomEvent<any>) => void;
    }
    interface SideSheet {
        "buttonLabel"?: string;
        "disabled"?: boolean;
        "handleSideSheetButton"?: () => void;
        "open"?: boolean;
        "position"?: 'left' | 'right';
        "sideSheetButtonLabel"?: string;
        "title"?: string;
        "toggleDrawer"?: () => void;
        "widthOption"?: 'short' | 'long' | number;
    }
    interface SideSheetContainer {
    }
    interface StatusChip {
        "statusClasses"?: { [key: string]: string };
        "statusValue"?: string | boolean;
    }
    interface StencilChip {
        "color"?: 'primary' | 'secondary';
        "defaultToggled"?: boolean;
        "externalToggleString"?: string;
        "leftIcon"?: any;
        "level"?: number;
        "onOnDelete"?: (event: StencilChipCustomEvent<void>) => void;
        "onOnToggle"?: (event: StencilChipCustomEvent<boolean>) => void;
        "onUdpChipClicked"?: (event: StencilChipCustomEvent<string>) => void;
        "showDelete"?: boolean;
        "showLeftIcon"?: boolean;
        "text"?: string;
    }
    interface StencilIconButton {
        "darkIcon"?: boolean;
        "icon"?: any;
        "iconClassName"?: string;
        "iconName"?: string;
        "noBackground"?: boolean;
        "onClick"?: (event: MouseEvent) => void;
        "secondary"?: boolean;
        "showLabel"?: boolean;
        "tooltip"?: string;
    }
    interface StencilToggle {
        "checked"?: boolean;
        "disabled"?: boolean;
        "idItem"?: string;
        "label"?: string;
        "onToggledChange"?: (event: StencilToggleCustomEvent<any>) => void;
    }
    interface TestApi {
    }
    interface TestApiUpdated {
    }
    interface TextField {
        "label"?: string;
        "onBlur"?: (event: Event) => void;
        "onInput"?: (event: Event) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface ToggleButton {
        "onToggle"?: () => void;
        "toggled"?: boolean;
    }
    interface TreeListItem {
        "customAttribute"?: string;
        "dataOne"?: string;
        "dataTwo"?: string;
        "deleteHandler"?: (event: MouseEvent) => void;
        "label"?: string;
        "level"?: number;
        "nestedItems"?: any[];
        "onItemClick"?: (event: TreeListItemCustomEvent<{ searchField: string, searchOperator: string, searchValue: string, parentName?: string, parentPath?: string, uniqueFieldId?: string }>) => void;
        "onReference-clicked"?: (event: TreeListItemCustomEvent<{ reference: string, name: string, parentReference?: string, parentFilter?: string, parent?: string, parentPath?: string }>) => void;
        "parent"?: string;
        "parentFilter"?: any;
        "parentName"?: string;
        "parentPath"?: string;
        "reference"?: string | null;
        "showAdd"?: boolean;
        "showDeleteOption"?: boolean;
        "showViewOption"?: boolean;
        "statusClasses"?: { [key: string]: string };
        "statusKey"?: string;
        "statusLabel"?: string;
        "statusValue"?: boolean;
        "test"?: string;
        "viewHandler"?: (event: MouseEvent) => void;
    }
    interface UdpAmbientToolTip {
        "content"?: string;
    }
    interface UdpAvatar {
        "username"?: string;
    }
    interface UdpBadge {
        "content"?: number;
        "max"?: number;
    }
    interface UdpColumnHeader {
    }
    interface UdpDivider {
        "size"?: string;
        "variant"?: 'horizontal' | 'vertical';
    }
    interface UdpDynamicContainerWithMenu {
        "externalToggle"?: string;
        "menuItems"?: any[];
        "onUdpChipClicked"?: (event: UdpDynamicContainerWithMenuCustomEvent<string>) => void;
    }
    interface UdpDynamicForm {
    }
    interface UdpFetch {
        "accessToken"?: string;
        "isServerSide"?: boolean;
        "onDataFetched"?: (event: UdpFetchCustomEvent<any>) => void;
        "promotedEntity"?: any;
        "tenantId"?: string;
    }
    interface UdpFunctionButton {
        "delete"?: boolean;
        "expand"?: boolean;
        "view"?: boolean;
    }
    interface UdpGridLoader {
        "numColumns"?: number;
        "numRows"?: number;
        "width"?: string;
    }
    interface UdpHotlistForm {
        "handleCancelClick"?: () => void;
        "handleFormSubmit"?: (name: string, isPrivate: boolean, columnState: any) => void;
        "refetchViews"?: () => void;
    }
    interface UdpLinearLoader {
    }
    interface UdpMenuItem {
        "label"?: string;
        "onItemClick"?: (event: UdpMenuItemCustomEvent<any>) => void;
    }
    interface UdpNotification {
        "active"?: boolean;
        "message"?: string;
        "status"?: 'success' | 'error' | 'warning';
        "userCancel"?: boolean;
    }
    interface UdpPageHeader {
        "onValueChanged"?: (event: UdpPageHeaderCustomEvent<any>) => void;
    }
    interface UdpPopOver {
        "anchorElement"?: HTMLElement;
        "isOpen"?: boolean;
    }
    interface UdpRadioButton {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "name"?: string;
        "value"?: string;
    }
    interface UdpSelector {
        "defaultOption"?: string;
        "fieldName"?: string;
        "label"?: string;
        "large"?: boolean;
        "onOptionSelected"?: (event: UdpSelectorCustomEvent<any>) => void;
        "options"?: Array<{ value: string; label: string }>;
    }
    interface UdpSkeletonLoading {
        "borderRadius"?: string;
        "height"?: string;
        "width"?: string;
    }
    interface UdpTab {
        "active"?: boolean;
        "title"?: string;
    }
    interface UdpTabs {
    }
    interface UdpUserCreator {
    }
    interface UnityTypography {
        "variant"?: TypographyVariant;
    }
    interface UpdAlertBanner {
        "message"?: string;
        "onClick"?: () => void;
        "type"?: 'info' | 'warning' | 'error' | 'success';
    }
    interface IntrinsicElements {
        "advanced-search": AdvancedSearch;
        "advanced-search-grouped": AdvancedSearchGrouped;
        "ag-grid": AgGrid;
        "ag-table": AgTable;
        "ambient-demo-container": AmbientDemoContainer;
        "ambient-template-grid": AmbientTemplateGrid;
        "app-bar": AppBar;
        "chip-section": ChipSection;
        "custom-button": CustomButton;
        "filter-conditions": FilterConditions;
        "fluent-dialog": FluentDialog;
        "get-user": GetUser;
        "grid-primary-bar": GridPrimaryBar;
        "hint-panel": HintPanel;
        "kpi-list": KpiList;
        "logical-search-indicator": LogicalSearchIndicator;
        "my-component": MyComponent;
        "primary-action-header": PrimaryActionHeader;
        "save-view-form-dialog": SaveViewFormDialog;
        "search-list-item": SearchListItem;
        "side-sheet": SideSheet;
        "side-sheet-container": SideSheetContainer;
        "status-chip": StatusChip;
        "stencil-chip": StencilChip;
        "stencil-icon-button": StencilIconButton;
        "stencil-toggle": StencilToggle;
        "test-api": TestApi;
        "test-api-updated": TestApiUpdated;
        "text-field": TextField;
        "toggle-button": ToggleButton;
        "tree-list-item": TreeListItem;
        "udp-ambient-tool-tip": UdpAmbientToolTip;
        "udp-avatar": UdpAvatar;
        "udp-badge": UdpBadge;
        "udp-column-header": UdpColumnHeader;
        "udp-divider": UdpDivider;
        "udp-dynamic-container-with-menu": UdpDynamicContainerWithMenu;
        "udp-dynamic-form": UdpDynamicForm;
        "udp-fetch": UdpFetch;
        "udp-function-button": UdpFunctionButton;
        "udp-grid-loader": UdpGridLoader;
        "udp-hotlist-form": UdpHotlistForm;
        "udp-linear-loader": UdpLinearLoader;
        "udp-menu-item": UdpMenuItem;
        "udp-notification": UdpNotification;
        "udp-page-header": UdpPageHeader;
        "udp-pop-over": UdpPopOver;
        "udp-radio-button": UdpRadioButton;
        "udp-selector": UdpSelector;
        "udp-skeleton-loading": UdpSkeletonLoading;
        "udp-tab": UdpTab;
        "udp-tabs": UdpTabs;
        "udp-user-creator": UdpUserCreator;
        "unity-typography": UnityTypography;
        "upd-alert-banner": UpdAlertBanner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "advanced-search": LocalJSX.AdvancedSearch & JSXBase.HTMLAttributes<HTMLAdvancedSearchElement>;
            "advanced-search-grouped": LocalJSX.AdvancedSearchGrouped & JSXBase.HTMLAttributes<HTMLAdvancedSearchGroupedElement>;
            "ag-grid": LocalJSX.AgGrid & JSXBase.HTMLAttributes<HTMLAgGridElement>;
            "ag-table": LocalJSX.AgTable & JSXBase.HTMLAttributes<HTMLAgTableElement>;
            "ambient-demo-container": LocalJSX.AmbientDemoContainer & JSXBase.HTMLAttributes<HTMLAmbientDemoContainerElement>;
            "ambient-template-grid": LocalJSX.AmbientTemplateGrid & JSXBase.HTMLAttributes<HTMLAmbientTemplateGridElement>;
            "app-bar": LocalJSX.AppBar & JSXBase.HTMLAttributes<HTMLAppBarElement>;
            "chip-section": LocalJSX.ChipSection & JSXBase.HTMLAttributes<HTMLChipSectionElement>;
            "custom-button": LocalJSX.CustomButton & JSXBase.HTMLAttributes<HTMLCustomButtonElement>;
            "filter-conditions": LocalJSX.FilterConditions & JSXBase.HTMLAttributes<HTMLFilterConditionsElement>;
            "fluent-dialog": LocalJSX.FluentDialog & JSXBase.HTMLAttributes<HTMLFluentDialogElement>;
            "get-user": LocalJSX.GetUser & JSXBase.HTMLAttributes<HTMLGetUserElement>;
            "grid-primary-bar": LocalJSX.GridPrimaryBar & JSXBase.HTMLAttributes<HTMLGridPrimaryBarElement>;
            "hint-panel": LocalJSX.HintPanel & JSXBase.HTMLAttributes<HTMLHintPanelElement>;
            "kpi-list": LocalJSX.KpiList & JSXBase.HTMLAttributes<HTMLKpiListElement>;
            "logical-search-indicator": LocalJSX.LogicalSearchIndicator & JSXBase.HTMLAttributes<HTMLLogicalSearchIndicatorElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "primary-action-header": LocalJSX.PrimaryActionHeader & JSXBase.HTMLAttributes<HTMLPrimaryActionHeaderElement>;
            "save-view-form-dialog": LocalJSX.SaveViewFormDialog & JSXBase.HTMLAttributes<HTMLSaveViewFormDialogElement>;
            "search-list-item": LocalJSX.SearchListItem & JSXBase.HTMLAttributes<HTMLSearchListItemElement>;
            "side-sheet": LocalJSX.SideSheet & JSXBase.HTMLAttributes<HTMLSideSheetElement>;
            "side-sheet-container": LocalJSX.SideSheetContainer & JSXBase.HTMLAttributes<HTMLSideSheetContainerElement>;
            "status-chip": LocalJSX.StatusChip & JSXBase.HTMLAttributes<HTMLStatusChipElement>;
            "stencil-chip": LocalJSX.StencilChip & JSXBase.HTMLAttributes<HTMLStencilChipElement>;
            "stencil-icon-button": LocalJSX.StencilIconButton & JSXBase.HTMLAttributes<HTMLStencilIconButtonElement>;
            "stencil-toggle": LocalJSX.StencilToggle & JSXBase.HTMLAttributes<HTMLStencilToggleElement>;
            "test-api": LocalJSX.TestApi & JSXBase.HTMLAttributes<HTMLTestApiElement>;
            "test-api-updated": LocalJSX.TestApiUpdated & JSXBase.HTMLAttributes<HTMLTestApiUpdatedElement>;
            "text-field": LocalJSX.TextField & JSXBase.HTMLAttributes<HTMLTextFieldElement>;
            "toggle-button": LocalJSX.ToggleButton & JSXBase.HTMLAttributes<HTMLToggleButtonElement>;
            "tree-list-item": LocalJSX.TreeListItem & JSXBase.HTMLAttributes<HTMLTreeListItemElement>;
            "udp-ambient-tool-tip": LocalJSX.UdpAmbientToolTip & JSXBase.HTMLAttributes<HTMLUdpAmbientToolTipElement>;
            "udp-avatar": LocalJSX.UdpAvatar & JSXBase.HTMLAttributes<HTMLUdpAvatarElement>;
            "udp-badge": LocalJSX.UdpBadge & JSXBase.HTMLAttributes<HTMLUdpBadgeElement>;
            "udp-column-header": LocalJSX.UdpColumnHeader & JSXBase.HTMLAttributes<HTMLUdpColumnHeaderElement>;
            "udp-divider": LocalJSX.UdpDivider & JSXBase.HTMLAttributes<HTMLUdpDividerElement>;
            "udp-dynamic-container-with-menu": LocalJSX.UdpDynamicContainerWithMenu & JSXBase.HTMLAttributes<HTMLUdpDynamicContainerWithMenuElement>;
            "udp-dynamic-form": LocalJSX.UdpDynamicForm & JSXBase.HTMLAttributes<HTMLUdpDynamicFormElement>;
            "udp-fetch": LocalJSX.UdpFetch & JSXBase.HTMLAttributes<HTMLUdpFetchElement>;
            "udp-function-button": LocalJSX.UdpFunctionButton & JSXBase.HTMLAttributes<HTMLUdpFunctionButtonElement>;
            "udp-grid-loader": LocalJSX.UdpGridLoader & JSXBase.HTMLAttributes<HTMLUdpGridLoaderElement>;
            "udp-hotlist-form": LocalJSX.UdpHotlistForm & JSXBase.HTMLAttributes<HTMLUdpHotlistFormElement>;
            "udp-linear-loader": LocalJSX.UdpLinearLoader & JSXBase.HTMLAttributes<HTMLUdpLinearLoaderElement>;
            "udp-menu-item": LocalJSX.UdpMenuItem & JSXBase.HTMLAttributes<HTMLUdpMenuItemElement>;
            "udp-notification": LocalJSX.UdpNotification & JSXBase.HTMLAttributes<HTMLUdpNotificationElement>;
            "udp-page-header": LocalJSX.UdpPageHeader & JSXBase.HTMLAttributes<HTMLUdpPageHeaderElement>;
            "udp-pop-over": LocalJSX.UdpPopOver & JSXBase.HTMLAttributes<HTMLUdpPopOverElement>;
            "udp-radio-button": LocalJSX.UdpRadioButton & JSXBase.HTMLAttributes<HTMLUdpRadioButtonElement>;
            "udp-selector": LocalJSX.UdpSelector & JSXBase.HTMLAttributes<HTMLUdpSelectorElement>;
            "udp-skeleton-loading": LocalJSX.UdpSkeletonLoading & JSXBase.HTMLAttributes<HTMLUdpSkeletonLoadingElement>;
            "udp-tab": LocalJSX.UdpTab & JSXBase.HTMLAttributes<HTMLUdpTabElement>;
            "udp-tabs": LocalJSX.UdpTabs & JSXBase.HTMLAttributes<HTMLUdpTabsElement>;
            "udp-user-creator": LocalJSX.UdpUserCreator & JSXBase.HTMLAttributes<HTMLUdpUserCreatorElement>;
            "unity-typography": LocalJSX.UnityTypography & JSXBase.HTMLAttributes<HTMLUnityTypographyElement>;
            "upd-alert-banner": LocalJSX.UpdAlertBanner & JSXBase.HTMLAttributes<HTMLUpdAlertBannerElement>;
        }
    }
}
